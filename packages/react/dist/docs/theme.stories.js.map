{"version":3,"sources":["../../src/docs/theme.stories.js"],"names":["withStyle","style","Component","props","VanillaButton","backgroundColor","border","color","StrawberryButton","PearButton","GrapeButton","ThemedButton","theme","children","ButtonGroup","buttons","F","mapIndexed","button","i","ThemedButtonGroup","module","add","UnusedComponent","DefaultVanillaButton","Button","DefaultVanillaFoo","Foo","UnnamedComponent","ExplicitlyNamedComponent","ButtonGroupGeorge","height","IconButton","Icon","ThemedIconButton"],"mappings":"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","sourcesContent":["import React from 'react'\nimport F from 'futil'\nimport { storiesOf } from '@storybook/react'\nimport {\n  ThemeProvider,\n  ThemeConsumer,\n  withTheme,\n  withNamedTheme,\n} from '../utils/theme'\nimport { wrapDisplayName } from '../utils/react'\n\nlet withStyle = (style, Component) =>\n  wrapDisplayName(\n    'withStyle',\n    Component\n  )(props => <Component style={style} {...props} />)\n\nlet VanillaButton = withStyle(\n  {\n    backgroundColor: 'cornsilk',\n    border: '2px solid tan',\n    color: 'rosybrown',\n  },\n  'button'\n)\n\nlet StrawberryButton = withStyle(\n  {\n    backgroundColor: 'lightcoral',\n    border: '2px solid limegreen',\n    color: 'greenyellow',\n  },\n  'button'\n)\n\nlet PearButton = withStyle(\n  {\n    border: '2px solid olive',\n    color: 'darkolivegreen',\n    backgroundColor: 'yellowgreen',\n  },\n  'button'\n)\n\nlet GrapeButton = withStyle(\n  {\n    border: '2px solid blueviolet',\n    color: 'chartreuse',\n    backgroundColor: 'mediumorchid',\n  },\n  'button'\n)\n\nlet ThemedButton = withTheme(({ theme, children }) => (\n  <theme.Button>{children}</theme.Button>\n))\n\nlet ButtonGroup = ({ theme, buttons = [] }) =>\n  F.mapIndexed((button, i) => <theme.Button key={i}>{button}</theme.Button>)(\n    buttons\n  )\n\nlet ThemedButtonGroup = withNamedTheme('ButtonGroup')(ButtonGroup)\n\nstoriesOf('Theme API|Examples', module)\n  .add('Global defaults', () => (\n    <>\n      <ThemedButton>\n        Default button from <code>withTheme</code>\n      </ThemedButton>\n      <ThemeConsumer>\n        {theme => (\n          <theme.Button>\n            Default button from <code>ThemeConsumer</code>\n          </theme.Button>\n        )}\n      </ThemeConsumer>\n      <ThemeProvider theme={{ UnusedComponent: 'div' }}>\n        <ThemedButton>Global defaults should work...</ThemedButton>\n        <ThemeConsumer>\n          {theme => (\n            <theme.Button>...with or without ThemeProvider</theme.Button>\n          )}\n        </ThemeConsumer>\n      </ThemeProvider>\n    </>\n  ))\n  .add('Component-level defaults', () => {\n    let DefaultVanillaButton = withTheme(\n      ({ theme: { Button = VanillaButton }, children }) => (\n        <Button>{children}</Button>\n      )\n    )\n    let DefaultVanillaFoo = withTheme(\n      ({ theme: { Foo = VanillaButton }, children }) => <Foo>{children}</Foo>\n    )\n    return (\n      <ThemeProvider>\n        <DefaultVanillaButton>\n          The global default for \"Button\" supercedes the component-level default\n        </DefaultVanillaButton>\n        <DefaultVanillaFoo>\n          \"Foo\" has no global default, so it uses the component-level default\n        </DefaultVanillaFoo>\n      </ThemeProvider>\n    )\n  })\n  .add('Theme precedence', () => (\n    <ThemeProvider\n      theme={{\n        Button: VanillaButton,\n        'ButtonGroup.Button': StrawberryButton,\n      }}\n    >\n      <ThemedButton>Top-level buttons are Vanilla</ThemedButton>\n      <ThemedButtonGroup\n        buttons={['Nested themes override top-level themes']}\n      />\n      <ThemedButtonGroup\n        theme={{ Button: PearButton }}\n        buttons={['Theme props override theme context']}\n      />\n    </ThemeProvider>\n  ))\n  .add('withNamedTheme', () => {\n    let UnnamedComponent = withTheme(({ theme }) => (\n      <>\n        <div>I am an anonymous component</div>\n        <theme.Button>Top-level buttons are Vanilla</theme.Button>\n      </>\n    ))\n    let ExplicitlyNamedComponent = withNamedTheme('Jerry')(({ theme }) => (\n      <>\n        <div>\n          I am also an anonymous component, but <code>withTheme</code> knows me\n          as \"Jerry\"\n        </div>\n        <theme.Button>Jerry buttons are Strawberry!</theme.Button>\n      </>\n    ))\n    let ButtonGroupGeorge = withNamedTheme('George')(ButtonGroup)\n    return (\n      <ThemeProvider\n        theme={{\n          Button: VanillaButton,\n          'Jerry.Button': StrawberryButton,\n          'George.Button': PearButton,\n        }}\n      >\n        <UnnamedComponent />\n        <div style={{ height: 20 }} />\n        <ExplicitlyNamedComponent />\n        <div style={{ height: 20 }} />\n        <div>\n          This component is a ButtonGroup, but <code>withTheme</code> knows it\n          as \"George\":\n        </div>\n        <ButtonGroupGeorge buttons={['George buttons are Pear!']} />\n      </ThemeProvider>\n    )\n  })\n\nstoriesOf('Theme API|Examples/ThemeConsumer', module)\n  .add('Without name', () => (\n    <ThemeProvider\n      theme={{\n        Button: VanillaButton,\n        ButtonGroup,\n        'ButtonGroup.Button': PearButton,\n      }}\n    >\n      <ThemeConsumer>\n        {({ Button }) => <Button>Top-level buttons are Vanilla</Button>}\n      </ThemeConsumer>\n    </ThemeProvider>\n  ))\n  .add('With name', () => (\n    <ThemeProvider\n      theme={{\n        Button: VanillaButton,\n        ButtonGroup,\n        'ButtonGroup.Button': GrapeButton,\n      }}\n    >\n      <ThemeConsumer name=\"ButtonGroup\">\n        {({ Button }) => <Button>ButtonGroup buttons are Grape!</Button>}\n      </ThemeConsumer>\n    </ThemeProvider>\n  ))\n\nlet IconButton = ({ theme: { Button, Icon }, children }) => (\n  <Button>\n    <Icon />\n    {children}\n  </Button>\n)\nlet ThemedIconButton = withNamedTheme('IconButton')(IconButton)\n\nstoriesOf('Theme API|Examples/Multi-level nesting', module)\n  .add('With theme context', () => (\n    <ThemeProvider\n      theme={{\n        Icon: () => <span>🍨</span>,\n        Button: VanillaButton,\n        'ButtonGroup.Button': ThemedIconButton,\n        'ButtonGroup.IconButton.Icon': () => <span>🍓</span>,\n        'ButtonGroup.IconButton.Button': StrawberryButton,\n      }}\n    >\n      <ThemedIconButton>Top-level Icon & Button theme</ThemedIconButton>\n      <ThemedButtonGroup buttons={['ButtonGroup Icon & Button theme']} />\n    </ThemeProvider>\n  ))\n  .add('With theme props', () => (\n    <ThemeProvider\n      theme={{\n        Icon: () => <span>🍨</span>,\n        Button: VanillaButton,\n      }}\n    >\n      <ThemedIconButton>Top-level Icon & Button theme</ThemedIconButton>\n      <ThemedButtonGroup\n        theme={{\n          Button: ThemedIconButton,\n          'IconButton.Icon': () => <span>🍇</span>,\n          'IconButton.Button': GrapeButton,\n        }}\n        buttons={['ButtonGroup Icon & Button theme']}\n      />\n    </ThemeProvider>\n  ))\n"],"file":"theme.stories.js"}