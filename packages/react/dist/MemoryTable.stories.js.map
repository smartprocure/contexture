{"version":3,"sources":["../src/MemoryTable.stories.js"],"names":["title","component","MemoryTable","decorators","parameters","componentSubtitle","info","story","_","times","x","id","value","random","label","withInfer","resultTableProps","emojiDataset","require","emojiData"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;eAEe;AACbA,EAAAA,KAAK,EAAE,aADM;AAEbC,EAAAA,SAAS,EAAEC,uBAFE;AAGbC,EAAAA,UAAU,EAAE,CAAC,6BAAY,UAAZ,CAAD,CAHC;AAIbC,EAAAA,UAAU,EAAE;AACVC,IAAAA,iBAAiB,EACf,sEAFQ;AAGVC,IAAAA,IAAI;AAHM;AAJC,C;;;AAeR,IAAIC,KAAK,GAAG,SAARA,KAAQ;AAAA,sBACjB,gCAAC,uBAAD;AACE,IAAA,IAAI,EAAEC,eAAEC,KAAF,CAAQ,UAAAC,CAAC;AAAA,aAAK;AAAEC,QAAAA,EAAE,EAAED,CAAN;AAASE,QAAAA,KAAK,EAAEJ,eAAEK,MAAF,CAAS,CAAT,EAAY,KAAZ;AAAhB,OAAL;AAAA,KAAT,EAAqD,GAArD,CADR;AAEE,IAAA,MAAM,EAAE;AAAEF,MAAAA,EAAE,EAAE;AAAEG,QAAAA,KAAK,EAAE;AAAT,OAAN;AAAsBF,MAAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT;AAA7B;AAFV,IADiB;AAAA,CAAZ;;;;AAOA,IAAIC,SAAS,GAAG,SAAZA,SAAY;AAAA,sBACrB,gCAAC,uBAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAEP,eAAEC,KAAF,CAAQ,UAAAC,CAAC;AAAA,aAAK;AAAEC,QAAAA,EAAE,EAAED,CAAN;AAASE,QAAAA,KAAK,EAAEJ,eAAEK,MAAF,CAAS,CAAT,EAAY,KAAZ;AAAhB,OAAL;AAAA,KAAT,EAAqD,GAArD;AAFR,IADqB;AAAA,CAAhB;;;;AAOA,IAAIG,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,sBAC5B,gCAAC,uBAAD;AACE,IAAA,IAAI,EAAER,eAAEC,KAAF,CAAQ,UAAAC,CAAC;AAAA,aAAK;AAAEC,QAAAA,EAAE,EAAED,CAAN;AAASE,QAAAA,KAAK,EAAEJ,eAAEK,MAAF,CAAS,CAAT,EAAY,KAAZ;AAAhB,OAAL;AAAA,KAAT,EAAqD,GAArD,CADR;AAEE,IAAA,MAAM,EAAE;AAAEF,MAAAA,EAAE,EAAE;AAAEG,QAAAA,KAAK,EAAE;AAAT,OAAN;AAAsBF,MAAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT;AAA7B,KAFV;AAGE,IAAA,eAAe,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb;AAHnB,IAD4B;AAAA,CAAvB;;;;AAQA,IAAIG,YAAY,GAAG,SAAfA,YAAe;AAAA,sBACxB,gCAAC,uBAAD;AAAa,IAAA,IAAI,EAAEC,OAAO,CAAC,kBAAD,CAA1B;AAAgD,IAAA,MAAM,EAAEC;AAAxD,IADwB;AAAA,CAAnB","sourcesContent":["import _ from 'lodash/fp'\nimport React from 'react'\nimport ThemePicker from './stories/themePicker'\nimport MemoryTable from './MemoryTable'\nimport emojiData from './exampleTypes/stories/emojiData'\n\nexport default {\n  title: 'MemoryTable',\n  component: MemoryTable,\n  decorators: [ThemePicker('greyVest')],\n  parameters: {\n    componentSubtitle:\n      \"A ResultTable from arbitrary data using contexture's memory provider\",\n    info: `\nMemoryTable is built on top of ResultTable and supports several of the same props: most notably \\`fields\\`, which takes a schema object that specifies which fields from the data are visible in the table and how they are ordered, and \\`infer\\`, which enables MemoryTable to infer field information from the given data without having to explicitly specify it in \\`fields\\`.\n\nHowever, in place of ResultTable's contexture-relevant \\`tree\\`/\\`node\\`/\\`path\\` props, MemoryTable simply accepts a \\`data\\` prop, which should be an array of obects. This is fed into a contexture instance running on the \\`memory\\` provider, which allows contexture to work against data in the form of plain Javascript objects (in contrast to, for example, a MongoDB database). The result is a dynamically-generated table with built-in support for sorting and filtering operations on the given data.\n`,\n  },\n}\n\nexport let story = () => (\n  <MemoryTable\n    data={_.times(x => ({ id: x, value: _.random(0, 20000) }), 221)}\n    fields={{ id: { label: '#' }, value: { label: 'Count' } }}\n  />\n)\n\nexport let withInfer = () => (\n  <MemoryTable\n    infer\n    data={_.times(x => ({ id: x, value: _.random(0, 20000) }), 221)}\n  />\n)\n\nexport let resultTableProps = () => (\n  <MemoryTable\n    data={_.times(x => ({ id: x, value: _.random(0, 20000) }), 221)}\n    fields={{ id: { label: '#' }, value: { label: 'Count' } }}\n    pageSizeOptions={[12, 24, 48, 96]}\n  />\n)\n\nexport let emojiDataset = () => (\n  <MemoryTable data={require('emoji-datasource')} fields={emojiData} />\n)\n"],"file":"MemoryTable.stories.js"}