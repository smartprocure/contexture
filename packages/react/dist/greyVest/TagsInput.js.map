{"version":3,"sources":["../../src/greyVest/TagsInput.js"],"names":["isValidInput","tag","tags","_","isEmpty","includes","TagsInput","inputRef","addTag","removeTag","submit","noop","tagStyle","placeholder","splitCommas","style","onBlur","onInputChange","onTagClick","Tag","DefaultTag","props","containerRef","React","useRef","state","currentInput","flow","split","invokeMap","compact","uniq","difference","map","trim","cursor","height","padding","t","border","outline","flex","margin","minWidth","e","target","value","key","preventDefault","length","last","MockTagsInput","push","without","displayName"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react'\nimport _ from 'lodash/fp'\nimport { observable } from 'mobx'\nimport { observer, inject, useLocalStore } from 'mobx-react'\nimport Flex from './Flex'\nimport DefaultTag from './Tag'\n\nlet isValidInput = (tag, tags) => !_.isEmpty(tag) && !_.includes(tag, tags)\n\nlet TagsInput = forwardRef(\n  (\n    {\n      tags,\n      addTag,\n      removeTag,\n      submit = _.noop,\n      tagStyle,\n      placeholder = 'Search...',\n      splitCommas,\n      style,\n      onBlur = _.noop,\n      onInputChange = _.noop,\n      onTagClick = _.noop,\n      Tag = DefaultTag,\n      ...props\n    },\n    inputRef\n  ) => {\n    let containerRef = React.useRef()\n    let state = useLocalStore(() => ({ currentInput: '' }))\n    addTag = splitCommas\n      ? _.flow(\n          _.split(','),\n          _.invokeMap('trim'),\n          _.compact,\n          _.uniq,\n          _.difference(_, tags),\n          _.map(addTag)\n        )\n      : _.flow(_.trim, addTag)\n    return (\n      <div className={'tags-input'} ref={containerRef} style={{ ...style }}>\n        <Flex\n          wrap\n          alignItems=\"center\"\n          style={{\n            cursor: 'text',\n            height: '100%',\n            padding: 2,\n          }}\n        >\n          {_.map(\n            t => (\n              <Tag\n                key={t}\n                value={t}\n                {...{ removeTag, tagStyle }}\n                onClick={() => onTagClick(t)}\n              />\n            ),\n            tags\n          )}\n          <input\n            style={{\n              border: 'none',\n              outline: 'none',\n              flex: 1,\n              margin: 3,\n              minWidth: 120,\n            }}\n            ref={inputRef}\n            onChange={e => {\n              state.currentInput = e.target.value\n              onInputChange()\n            }}\n            onBlur={() => {\n              if (isValidInput(state.currentInput, tags)) {\n                addTag(state.currentInput)\n                state.currentInput = ''\n                onBlur()\n              }\n            }}\n            onKeyDown={e => {\n              if (e.key === 'Enter' && !state.currentInput) submit()\n              if (\n                (_.includes(e.key, ['Enter', 'Tab']) ||\n                  (splitCommas && e.key === ',')) &&\n                isValidInput(state.currentInput, tags)\n              ) {\n                addTag(state.currentInput)\n                state.currentInput = ''\n                e.preventDefault()\n              }\n              if (e.key === 'Backspace' && !state.currentInput && tags.length) {\n                let last = _.last(tags)\n                removeTag(last)\n                state.currentInput = last\n                e.preventDefault()\n              }\n            }}\n            value={state.currentInput}\n            placeholder={placeholder}\n            {...props}\n          />\n        </Flex>\n      </div>\n    )\n  }\n)\n\n// Just uses an internal observable array\nexport let MockTagsInput = inject(() => {\n  let tags = observable([])\n  return {\n    tags,\n    addTag(tag) {\n      tags.push(tag)\n    },\n    removeTag(tag) {\n      tags = _.without(tag, tags)\n    },\n  }\n})(TagsInput)\nMockTagsInput.displayName = 'MockTagsInput'\n\nexport default observer(TagsInput)\n"],"file":"TagsInput.js"}