{"version":3,"sources":["../../src/greyVest/Popover.js"],"names":["Popover","trigger","isOpen","onClose","arrow","position","closeOnDocumentClick","closeOnPopoverClick","arrowStyle","contentStyle","style","children","props","open","F","callOrReturn","margin","borderRight","borderBottom","boxShadow","borderRadius","border","close","_","isFunction","openBinding"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;AAUA,IAAIA,OAAO,GAAG,SAAVA,OAAU;AAAA,MACZC,QADY,QACZA,OADY;AAAA,MAEZC,MAFY,QAEZA,MAFY;AAAA,MAGZC,OAHY,QAGZA,OAHY;AAAA,MAIZC,KAJY,QAIZA,KAJY;AAAA,MAKZC,QALY,QAKZA,QALY;AAAA,mCAMZC,oBANY;AAAA,MAMZA,oBANY,sCAMW,IANX;AAAA,mCAOZC,mBAPY;AAAA,MAOZA,mBAPY,sCAOU,IAPV;AAAA,MAQZC,UARY,QAQZA,UARY;AAAA,MASZC,YATY,QASZA,YATY;AAAA,MAUZC,KAVY,QAUZA,KAVY;AAAA,MAWZC,QAXY,QAWZA,QAXY;AAAA,MAYTC,KAZS;;AAAA,sBAcZ,gCAAC,wBAAD,CACE;AADF;AAEE,IAAA,OAAO,EAAE,iBAAAC,IAAI;AAAA,0BAAI,8CAAOC,kBAAEC,YAAF,CAAed,QAAf,EAAwBY,IAAxB,CAAP,CAAJ;AAAA,KAFf;AAGE,IAAA,IAAI,EAAEX,MAHR;AAIE,IAAA,OAAO,EAAEC,OAJX;AAKE,IAAA,KAAK,EAAEC,KALT;AAME,IAAA,QAAQ,EAAEC,QAAQ,IAAI,aANxB;AAOE,IAAA,oBAAoB,EAAEC,oBAPxB;AAQE,IAAA,UAAU;AACR;AACAU,MAAAA,MAAM,EAAE,MAFA;AAGRC,MAAAA,WAAW,EAAE,8BAHL;AAIRC,MAAAA,YAAY,EAAE,8BAJN;AAKRC,MAAAA,SAAS,EAAE;AALH,OAMLX,UANK,CARZ;AAgBE,IAAA,YAAY;AACVY,MAAAA,YAAY,EAAE,CADJ;AAEVC,MAAAA,MAAM,EAAE,8BAFE;AAGVF,MAAAA,SAAS,EAAE;AAHD,OAIPV,YAJO,GAKPC,KALO;AAhBd,KAuBME,KAvBN,GAyBG,UAAAU,KAAK;AAAA,wBACJ;AAAK,MAAA,OAAO,EAAEf,mBAAmB,GAAGe,KAAH,GAAW;AAA5C,OACGC,eAAEC,UAAF,CAAab,QAAb,IAAyBA,QAAQ,CAACW,KAAD,CAAjC,GAA2CX,QAD9C,CADI;AAAA,GAzBR,CAdY;AAAA,CAAd;;eA+Ce,yBAAY,MAAZ,EAAoBc,kBAApB,EAAiCzB,OAAjC,C","sourcesContent":["import React from 'react'\nimport _ from 'lodash/fp'\nimport F from 'futil'\nimport Popup from 'reactjs-popup'\nimport { openBinding } from './utils'\nimport { explodeProp } from '../utils/react'\n\n/**\n * Self-contained state management:\n * <Popover trigger={<Button/>} />\n *\n * External state management:\n * <Popover isOpen={bool} onClose={fn} />\n *\n * Also with openBinding for a state lens\n * <Popover open={lens} />\n **/\nlet Popover = ({\n  trigger,\n  isOpen,\n  onClose,\n  arrow,\n  position,\n  closeOnDocumentClick = true,\n  closeOnPopoverClick = true,\n  arrowStyle,\n  contentStyle,\n  style,\n  children,\n  ...props\n}) => (\n  <Popup\n    // always passing trigger, otherwise it opens as fullscreen modal\n    trigger={open => <span>{F.callOrReturn(trigger, open)}</span>}\n    open={isOpen}\n    onClose={onClose}\n    arrow={arrow}\n    position={position || 'bottom left'}\n    closeOnDocumentClick={closeOnDocumentClick}\n    arrowStyle={{\n      // matching arrow style with the popover body\n      margin: '-6px',\n      borderRight: '1px solid rgb(235, 235, 235)',\n      borderBottom: '1px solid rgb(235, 235, 235)',\n      boxShadow: 'rgba(39, 44, 65, 0.05) 2px 2px 3px',\n      ...arrowStyle,\n    }}\n    contentStyle={{\n      borderRadius: 3,\n      border: '1px solid rgb(235, 235, 235)',\n      boxShadow: '0 2px 10px 0 rgba(39, 44, 65, 0.1)',\n      ...contentStyle,\n      ...style,\n    }}\n    {...props}\n  >\n    {close => (\n      <div onClick={closeOnPopoverClick ? close : null}>\n        {_.isFunction(children) ? children(close) : children}\n      </div>\n    )}\n  </Popup>\n)\n\nexport default explodeProp('open', openBinding)(Popover)\n"],"file":"Popover.js"}