{"version":3,"sources":["../../src/greyVest/Modal.stories.js"],"names":["title","component","Modal","decorators","decorator","withOpenProp","open","React","useState","F","on","story","name","withIsOpenOnCloseProps","isOpen","setIsOpen","fromPopover","modal","popover","view","off"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;eAEe;AACbA,EAAAA,KAAK,EAAE,wBADM;AAEbC,EAAAA,SAAS,EAAEC,OAFE;AAGbC,EAAAA,UAAU,EAAE,CAACC,qBAAD;AAHC,C;;;AAMR,IAAIC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,MAAIC,IAAI,GAAGC,kBAAMC,QAAN,CAAe,KAAf,CAAX;;AACA,sBACE,+EACE,gCAAC,OAAD;AAAO,IAAA,IAAI,EAAEF;AAAb,0BADF,eAEE,gCAAC,QAAD;AAAQ,IAAA,OAAO,EAAEG,kBAAEC,EAAF,CAAKJ,IAAL;AAAjB,kBAFF,CADF;AAMD,CARM;;;AASPD,YAAY,CAACM,KAAb,GAAqB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAArB;;AAEO,IAAIC,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AAAA,wBACdN,kBAAMC,QAAN,CAAe,KAAf,CADc;AAAA;AAAA,MACnCM,MADmC;AAAA,MAC3BC,SAD2B;;AAExC,sBACE,+EACE,gCAAC,OAAD;AAAO,IAAA,MAAM,EAAED,MAAf;AAAuB,IAAA,OAAO,EAAE;AAAA,aAAMC,SAAS,CAAC,KAAD,CAAf;AAAA;AAAhC,0BADF,eAIE,gCAAC,QAAD;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,IAAD,CAAf;AAAA;AAAjB,kBAJF,CADF;AAQD,CAVM;;;AAWPF,sBAAsB,CAACF,KAAvB,GAA+B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA/B;;AAEO,IAAII,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B,MAAIV,IAAI,GAAG,2BAAc;AAAEW,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GAAd,CAAX;AACA,sBACE,+EACE,wWADF,eAQE,gCAAC,QAAD;AAAQ,IAAA,OAAO,EAAET,kBAAEC,EAAF,CAAKJ,IAAI,CAACY,OAAV;AAAjB,oBARF,eASE,gCAAC,SAAD;AACE,IAAA,MAAM,EAAET,kBAAEU,IAAF,CAAOb,IAAI,CAACY,OAAZ,CADV;AAEE,IAAA,OAAO,EAAE;AAAA,aAAM,CAACT,kBAAEU,IAAF,CAAOb,IAAI,CAACW,KAAZ,CAAD,IAAuBR,kBAAEW,GAAF,CAAMd,IAAI,CAACY,OAAX,GAA7B;AAAA;AAFX,kBAIE,gCAAC,cAAD;AAAc,IAAA,OAAO,EAAET,kBAAEC,EAAF,CAAKJ,IAAI,CAACW,KAAV;AAAvB,kBAJF,eAKE,gCAAC,OAAD;AAAO,IAAA,IAAI,EAAEX,IAAI,CAACW;AAAlB,0BALF,CATF,CADF;AAmBD,CArBM","sourcesContent":["import React from 'react'\nimport F from 'futil'\nimport { useLensObject } from '../utils/react'\nimport { Modal, Button, Popover, DropdownItem } from '.'\nimport decorator from './stories/decorator'\n\nexport default {\n  title: 'GreyVest Library|Modal',\n  component: Modal,\n  decorators: [decorator],\n}\n\nexport let withOpenProp = () => {\n  let open = React.useState(false)\n  return (\n    <>\n      <Modal open={open}>Some Modal Content</Modal>\n      <Button onClick={F.on(open)}>Open Modal</Button>\n    </>\n  )\n}\nwithOpenProp.story = { name: \"With 'open' prop\" }\n\nexport let withIsOpenOnCloseProps = () => {\n  let [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={() => setIsOpen(false)}>\n        Some Modal Content\n      </Modal>\n      <Button onClick={() => setIsOpen(true)}>Open Modal</Button>\n    </>\n  )\n}\nwithIsOpenOnCloseProps.story = { name: \"With 'isOpen'/'onClose' props\" }\n\nexport let fromPopover = () => {\n  let open = useLensObject({ modal: false, popover: false })\n  return (\n    <>\n      <p>\n        Demonstrates how to use modals inside of popovers. Ideally, the modal\n        component should live outside the popover even if its opener is inside\n        the popover, but in cases where it's absolutely necessary, modals can\n        survive inside of popovers as long as steps are taken to keep the\n        popover open as long as the modal is.\n      </p>\n      <Button onClick={F.on(open.popover)}>Open Popover</Button>\n      <Popover\n        isOpen={F.view(open.popover)}\n        onClose={() => !F.view(open.modal) && F.off(open.popover)()}\n      >\n        <DropdownItem onClick={F.on(open.modal)}>Open Modal</DropdownItem>\n        <Modal open={open.modal}>Some modal content</Modal>\n      </Popover>\n    </>\n  )\n}\n"],"file":"Modal.stories.js"}