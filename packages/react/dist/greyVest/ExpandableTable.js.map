{"version":3,"sources":["../../src/greyVest/ExpandableTable.js"],"names":["Column","_","identity","displayName","ExpandedSection","columnCount","expandedRow","getOr","details","Component","get","field","record","TableBodyState","state","expanded","Map","onClick","keyField","index","key","indexedField","set","TableBody","data","columns","recordKey","map","x","rowAttrs","has","F","mapIndexed","i","display","isEmpty","style","cursor","isEqual","length","TableState","stores","props","pick","compactObject","children","castArray","ExpandableTable","sortField","sortDir","columnSort","tableAttrs","c","enableSort","textDecoration","callOrReturn","autoLabel"],"mappings":"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","sourcesContent":["import _ from 'lodash/fp'\nimport * as F from 'futil'\nimport React from 'react'\nimport { observable } from 'mobx'\nimport { observer, inject } from 'mobx-react'\n\nexport let Column = _.identity\nColumn.displayName = 'Column'\n\nlet ExpandedSection = observer(\n  ({ columnCount, expandedRow }) =>\n    _.getOr(null, 'details.Component', expandedRow) && (\n      <tr align=\"center\">\n        <td colSpan={columnCount}>\n          {expandedRow.details.Component(\n            _.get(expandedRow.field, expandedRow.record),\n            expandedRow.record\n          )}\n        </td>\n      </tr>\n    )\n)\n\nlet TableBodyState = () => {\n  let state = {\n    expanded: observable(new Map()),\n    onClick(field, keyField, record, index, details) {\n      let key = record[keyField]\n      let indexedField = `${field}${index}`\n\n      if (_.get('indexedField', state.expanded.get(key)) !== indexedField) {\n        state.expanded.set(key, {\n          key,\n          record,\n          field,\n          indexedField,\n          details,\n        })\n      } else {\n        state.expanded.delete(key)\n      }\n    },\n  }\n\n  return state\n}\n\nlet TableBody = inject(TableBodyState)(\n  observer(({ data, columns, recordKey, expanded, onClick }) => (\n    <tbody>\n      {_.map(\n        x => (\n          <React.Fragment key={x[recordKey]}>\n            <tr\n              {...x.rowAttrs}\n              key={x[recordKey]}\n              className={\n                _.getOr('', 'rowAttrs.className', x) +\n                (expanded.has(x[recordKey]) ? 'expanded' : '')\n              }\n            >\n              {F.mapIndexed(\n                ({ field, display = x => x, details = {} }, i) => (\n                  <td\n                    key={`${field}${i}`}\n                    {...(!_.isEmpty(details) && {\n                      style: {\n                        cursor: !_.isEmpty(details) ? 'pointer' : 'auto',\n                      },\n                      onClick: () =>\n                        onClick(field, recordKey, x, i, details, expanded),\n                    })}\n                  >\n                    {_.getOr(\n                      display,\n                      `${\n                        _.isEqual(\n                          _.get('indexedField', expanded.get(x[recordKey])),\n                          `${field}${i}`\n                        )\n                          ? 'collapse'\n                          : 'expand'\n                      }.display`,\n                      details\n                    )(_.get(field, x), x)}\n                  </td>\n                ),\n                columns\n              )}\n            </tr>\n            {/* See if there is a details component to render for the column value when row expanded */}\n            {expanded.has(x[recordKey]) && (\n              <ExpandedSection\n                expandedRow={expanded.get(x[recordKey])}\n                columnCount={columns.length}\n              />\n            )}\n          </React.Fragment>\n        ),\n        data\n      )}\n    </tbody>\n  ))\n)\n\nlet TableState = (stores, props) => ({\n  columns: _.map(\n    ({ props }) => ({\n      ..._.pick(['field', 'label', 'display', 'enableSort'], props),\n      details: F.compactObject({\n        ..._.pick(['expand', 'collapse'], props),\n        Component: props.children,\n      }),\n    }),\n    _.castArray(props.children)\n  ),\n})\n\nlet ExpandableTable = inject(TableState)(\n  observer(\n    ({\n      data,\n      columns,\n      recordKey = 'key',\n      sortField,\n      sortDir,\n      columnSort = _.identity,\n      ...props\n    }) => (\n      <table {...props.tableAttrs}>\n        <thead>\n          <tr>\n            {F.mapIndexed(\n              (c, i) => (\n                <th\n                  key={`${c.field}${i}`}\n                  {...(c.enableSort && {\n                    onClick: () => columnSort(c),\n                    style: { cursor: 'pointer', textDecoration: 'underline' },\n                  })}\n                >\n                  <div className=\"shadow\" />\n                  <span>\n                    {F.callOrReturn(_.getOr(F.autoLabel(c.field), 'label', c))}\n                    {c.enableSort && c.field === sortField && sortDir\n                      ? sortDir === 'asc'\n                        ? '▲'\n                        : '▼'\n                      : ''}\n                  </span>\n                </th>\n              ),\n              columns\n            )}\n          </tr>\n        </thead>\n        <TableBody columns={columns} data={data} recordKey={recordKey} />\n      </table>\n    )\n  )\n)\n\nExpandableTable.displayName = 'ExpandableTable'\n\nexport default ExpandableTable\n"],"file":"ExpandableTable.js"}