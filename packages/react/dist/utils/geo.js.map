{"version":3,"sources":["../../src/utils/geo.js"],"names":["defaultHereConfig","app_id","app_code","country","autocomplete","geoCoding","formatAddress","address","matchLevel","district","city","state","street","county","postalCode","houseNumber","geoLevel","intersection","loadHereOptions","inputValue","countryCode","hereConfig","length","url","apiUrl","fetch","json","data","error","console","Error","_","getOr","map","d","label","value","locationId","getLocationInfo","get","geoCodeLocation","flow","mapKeys","toLower"],"mappings":"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","sourcesContent":["import _ from 'lodash/fp'\n\nconst defaultHereConfig = {\n  app_id: 'KzmI0fMwTyOG10rqZacS', // TEMP EMAIL USED - USE/GET YOUR APP_ID\n  app_code: 'PykXtnTUeH7DDM-RLlpwyA', // TEMP EMAIL USED - USE/GET YOUR APP_CODE\n  country: 'USA',\n  autocomplete: 'https://autocomplete.geocoder.api.here.com/6.2/suggest.json',\n  geoCoding: 'https://geocoder.api.here.com/6.2/geocode.json?gen=9',\n}\n\nlet formatAddress = ({ address, matchLevel }) => {\n  let {\n    country,\n    district,\n    city,\n    state,\n    street,\n    county,\n    postalCode,\n    houseNumber,\n  } = address\n  street = `${street} ${city}, ${county}, ${state}`\n  let geoLevel = {\n    country,\n    district: `${district} ${city} ${state}`,\n    city: `${city} ${county} ${state}`,\n    houseNumber: `${houseNumber} ${street}`,\n    county: `${county}, ${state}`,\n    state: `${state}, ${country}`,\n    postalCode: `${city} ${county}, ${state}, ${postalCode}`,\n    street,\n    intersection: street,\n  }\n  return geoLevel[matchLevel]\n}\nexport let loadHereOptions = async (\n  inputValue,\n  countryCode = 'USA',\n  hereConfig = defaultHereConfig\n) => {\n  if (inputValue.length <= 2) return []\n  if (typeof countryCode === 'object') {\n    hereConfig = countryCode\n    countryCode = 'USA'\n  }\n  hereConfig.country = countryCode\n  let { autocomplete: url, app_id, app_code, country } = hereConfig\n  let apiUrl = `${url}?app_id=${app_id}&app_code=${app_code}&country=${country}&query=${inputValue}`\n\n  let data = await (await fetch(apiUrl)).json()\n\n  if (data.error) {\n    console.error('loadHereOptions', data.error)\n    throw new Error(data.error)\n  } else {\n    return _.getOr([], 'suggestions', data).map(d => ({\n      label: formatAddress(d),\n      value: d.locationId,\n    }))\n  }\n}\n\nexport let getLocationInfo = async (\n  locationId,\n  hereConfig = defaultHereConfig\n) => {\n  let { geoCoding: url, app_id, app_code } = hereConfig\n  let apiUrl = `${url}&app_id=${app_id}&app_code=${app_code}&locationid=${locationId}`\n\n  let data = await (await fetch(apiUrl)).json()\n\n  if (data.error) {\n    console.error('geoCodeLocation', data.error)\n    throw new Error(data.error)\n  } else {\n    return _.get('Response.View.0.Result.0', data)\n  }\n}\n\nexport let geoCodeLocation = async (\n  locationId,\n  hereConfig = defaultHereConfig\n) =>\n  _.flow(\n    _.get('Location.DisplayPosition'),\n    _.mapKeys(_.toLower)\n  )(await getLocationInfo(locationId, hereConfig))\n"],"file":"geo.js"}