{"version":3,"sources":["../../src/utils/schema.js"],"names":["applyDefaults","F","mapValuesIndexed","val","field","label","autoLabel","order","display","x","when","_","get","join","getRecord","_id","_source","getResults","cascade","inferSchema","flow","head","flattenPlainObject","defaultNodeProps","fields","type","schemaFieldProps","curry","props","pick","componentForType","TypeMap","whenExists","singleObject","fieldsFromSchema","schemas","search","tree","schema"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;AAEO,IAAIA,aAAa,GAAGC,CAAC,CAACC,gBAAF,CAAmB,UAACC,GAAD,EAAMC,KAAN;AAAA;AAC5CA,IAAAA,KAAK,EAALA,KAD4C;AAE5CC,IAAAA,KAAK,EAAEJ,CAAC,CAACK,SAAF,CAAYF,KAAZ,CAFqC;AAG5CG,IAAAA,KAAK,EAAE,CAHqC;AAI5C;AACAC,IAAAA,OAAO,EAAE,iBAAAC,CAAC;AAAA,aAAIR,CAAC,CAACS,IAAF,CAAOC,eAAEC,GAAF,CAAM,MAAN,CAAP,EAAsBD,eAAEE,IAAF,CAAO,IAAP,CAAtB,EAAoCJ,CAApC,CAAJ;AAAA;AALkC,KAMzCN,GANyC;AAAA,CAAnB,CAApB;;AASA,IAAIW,SAAS,GAAGb,CAAC,CAACS,IAAF,CAAO,SAAP,EAAkB,UAAAD,CAAC;AAAA;AACxCM,IAAAA,GAAG,EAAEN,CAAC,CAACM;AADiC,KAErCN,CAAC,CAACO,OAFmC;AAAA,CAAnB,CAAhB;;AAKA,IAAIC,UAAU,GAAGhB,CAAC,CAACiB,OAAF,CAAU,CAChC,0BADgC,EAEhC,iBAFgC,CAAV,CAAjB;;;AAKA,IAAIC,WAAW,GAAGR,eAAES,IAAF,CACvBH,UADuB,EAEvBN,eAAEU,IAFqB,EAGvBP,SAHuB,EAIvBQ,0BAJuB,CAAlB;;;;AAOA,IAAIC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACnB,KAAD,EAAQoB,MAAR,EAAgBC,IAAhB;AAAA,SAC5Bd,eAAEC,GAAF,CAAM,CAACR,KAAD,EAAQ,kBAAR,EAA4BqB,IAA5B,CAAN,EAAyCD,MAAzC,CAD4B;AAAA,CAAvB;;;;AAGA,IAAIE,gBAAgB,GAAGf,eAAEgB,KAAF,CAAQ,UAACC,KAAD,QAAmBJ,MAAnB;AAAA,MAAUpB,KAAV,QAAUA,KAAV;AAAA,SACpCO,eAAEkB,IAAF,CAAOD,KAAP,EAAcJ,MAAM,CAACpB,KAAD,CAApB,CADoC;AAAA,CAAR,CAAvB;;;;AAIA,IAAI0B,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO;AAAA,SAAI;AAAA,QAAGN,IAAH,SAAGA,IAAH;AAAA,WACvCxB,CAAC,CAAC+B,UAAF,CAAa/B,CAAC,CAACgC,YAAF,CAAe,WAAf,CAAb,EAA0CF,OAAO,CAACN,IAAD,CAAjD,CADuC;AAAA,GAAJ;AAAA,CAA9B;;;;AAGA,IAAIS,gBAAgB,GAAGvB,eAAEgB,KAAF,CAC5B,UAACQ,OAAD,EAAUC,MAAV;AAAA,SAAqBD,OAAO,CAACC,MAAM,CAACC,IAAP,CAAYC,MAAb,CAAP,CAA4Bd,MAAjD;AAAA,CAD4B,CAAvB","sourcesContent":["import _ from 'lodash/fp'\nimport * as F from 'futil'\nimport { flattenPlainObject } from './futil'\n\nexport let applyDefaults = F.mapValuesIndexed((val, field) => ({\n  field,\n  label: F.autoLabel(field),\n  order: 0,\n  // `_.get('push') is used instead of `_.isArray` to match mobx4 arrays\n  display: x => F.when(_.get('push'), _.join(', '))(x),\n  ...val,\n}))\n\nexport let getRecord = F.when('_source', x => ({\n  _id: x._id,\n  ...x._source,\n}))\n\nexport let getResults = F.cascade([\n  'context.response.results',\n  'context.results',\n])\n\nexport let inferSchema = _.flow(\n  getResults,\n  _.head,\n  getRecord,\n  flattenPlainObject\n)\n\nexport let defaultNodeProps = (field, fields, type) =>\n  _.get([field, 'defaultNodeProps', type], fields)\n\nexport let schemaFieldProps = _.curry((props, { field }, fields) =>\n  _.pick(props, fields[field])\n)\n\nexport let componentForType = TypeMap => ({ type }) =>\n  F.whenExists(F.singleObject('component'))(TypeMap[type])\n\nexport let fieldsFromSchema = _.curry(\n  (schemas, search) => schemas[search.tree.schema].fields\n)\n"],"file":"schema.js"}