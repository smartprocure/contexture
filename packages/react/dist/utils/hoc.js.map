{"version":3,"sources":["../../src/utils/hoc.js"],"names":["withNode","Component","props","tree","node","path","getNode","Error","withLoader","_","flow","observer","Loader","theme","StripedLoader","updating","withInlineLoader","display","contexturify","withTheme","contexturifyWithoutLoader","withTreeLens","prop","lens"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\nimport _ from 'lodash/fp'\nimport { StripedLoader } from '../greyVest'\nimport { wrapDisplayName } from './react'\nimport { withTheme } from './theme'\n\nexport let withNode = Component =>\n  wrapDisplayName(\n    'withNode',\n    Component\n  )(props => {\n    let { tree, node, path } = props\n    node = node || (tree && path && tree.getNode(path))\n\n    if (!node)\n      throw Error(`Node not provided, and couldn't find node at ${path}`)\n\n    return <Component {...props} node={node} />\n  })\n\nexport let withLoader = Component =>\n  _.flow(\n    wrapDisplayName('withLoader', Component),\n    observer\n  )(({ Loader, ...props }) => {\n    let { theme = {}, node } = props\n    Loader = Loader || theme.Loader || StripedLoader\n    return (\n      <Loader loading={node && node.updating}>\n        <Component node={node} {...props} />\n      </Loader>\n    )\n  })\n\n// I am a band-aid, please rip me off as quickly as possible\nexport let withInlineLoader = Component =>\n  _.flow(\n    wrapDisplayName('withInlineLoader', Component),\n    observer\n  )(({ Loader, ...props }) => {\n    let { theme = {}, node } = props\n    Loader = Loader || theme.Loader || StripedLoader\n    return (\n      <Loader\n        loading={node && node.updating}\n        style={{ display: 'inline-block' }}\n      >\n        <Component {...props} />\n      </Loader>\n    )\n  })\n\nexport let contexturify = _.flow(observer, withLoader, withNode, withTheme)\n\nexport let contexturifyWithoutLoader = _.flow(observer, withNode, withTheme)\n\n// this is used for the text components\nexport let withTreeLens = Component =>\n  wrapDisplayName(\n    'withTreeLens',\n    Component\n  )(({ prop = 'value', ...props }) => (\n    <Component\n      {...{ lens: props.tree.lens(props.node.path, prop), ...props }}\n    />\n  ))\n"],"file":"hoc.js"}