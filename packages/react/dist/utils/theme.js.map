{"version":3,"sources":["../../src/utils/theme.js"],"names":["defaultTheme","ThemeContext","React","createContext","ThemeProvider","theme","children","Root","Fragment","hasNested","key","F","findIndexed","v","k","_","startsWith","mergeNestedTheme","when","flow","pickBy","val","mapKeys","replace","defaults","useTheme","name","propTheme","useContext","ThemeConsumer","newTheme","withNamedTheme","Component","themed","props","displayName","withTheme"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACO,IAAIA,YAAY,GAAG,EAAnB;;;AACP,IAAIC,YAAY,gBAAGC,kBAAMC,aAAN,CAAoBH,YAApB,CAAnB;;AAEO,IAAII,aAAa,GAAG,SAAhBA,aAAgB,OAAyB;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAClDD,EAAAA,KAAK,mCAAQL,YAAR,GAAyBK,KAAzB,CAAL;AACA,MAAIE,IAAI,GAAGF,KAAK,CAACE,IAAN,IAAcL,kBAAMM,QAA/B;AACA,sBACE,gCAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEH;AAA9B,kBACE,gCAAC,IAAD,QAAOC,QAAP,CADF,CADF;AAKD,CARM;;;;AAUP,IAAIG,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG;AAAA,SAAIC,kBAAEC,WAAF,CAAc,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUC,eAAEC,UAAF,WAAgBN,GAAhB,QAAwBI,CAAxB,CAAV;AAAA,GAAd,CAAJ;AAAA,CAAnB;;AAEO,IAAIG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACZ,KAAD,EAAQK,GAAR;AAAA,SAC5BC,kBAAEO,IAAF,CACET,SAAS,CAACC,GAAD,CADX,EAEEK,eAAEI,IAAF,CACEJ,eAAEK,MAAF,CAAS,UAACC,GAAD,EAAMP,CAAN;AAAA,WAAYC,eAAEC,UAAF,WAAgBN,GAAhB,QAAwBI,CAAxB,CAAZ;AAAA,GAAT,CADF,EAEEC,eAAEO,OAAF,CAAUP,eAAEQ,OAAF,WAAab,GAAb,QAAqB,EAArB,CAAV,CAFF,EAGEK,eAAES,QAAF,CAAWnB,KAAX,CAHF,CAFF,EAOEA,KAPF,CAD4B;AAAA,CAAvB;;;;AAUA,IAAIoB,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAOC,SAAP;AAAA,SACpB,2BACEV,gBAAgB,CAACf,kBAAM0B,UAAN,CAAiB3B,YAAjB,CAAD,EAAiCyB,IAAjC,CADlB,EAEEC,SAFF,CADoB;AAAA,CAAf;;;;AAMA,IAAIE,aAAa,GAAG,SAAhBA,aAAgB,QAA+B;AAAA,MAA5BH,IAA4B,SAA5BA,IAA4B;AAAA,MAAtBpB,QAAsB,SAAtBA,QAAsB;AAAA,MAAZD,KAAY,SAAZA,KAAY;AACxD,MAAIyB,QAAQ,GAAGL,QAAQ,CAACC,IAAD,EAAOrB,KAAP,CAAvB;AACA,sBACE,gCAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEyB;AAA9B,KACGxB,QAAQ,CAACwB,QAAD,CADX,CADF;AAKD,CAPM;;;;AASA,IAAIC,cAAc,GAAG,SAAjBA,cAAiB,CAAAL,IAAI;AAAA,SAAI,UAAAM,SAAS,EAAI;AAC/C,QAAIC,MAAM,GAAG,SAATA,MAAS,QAAyB;AAAA,UAAtB5B,KAAsB,SAAtBA,KAAsB;AAAA,UAAZ6B,KAAY;;AACpC,UAAIJ,QAAQ,GAAGL,QAAQ,CAACC,IAAD,EAAOrB,KAAP,CAAvB;AACA,0BACE,gCAAC,YAAD,CAAc,QAAd;AAAuB,QAAA,KAAK,EAAEyB;AAA9B,sBACE,gCAAC,SAAD,eAAeI,KAAf;AAAsB,QAAA,KAAK,EAAEJ;AAA7B,SADF,CADF;AAKD,KAPD;;AAQAG,IAAAA,MAAM,CAACE,WAAP,sBAAiCT,IAAI,gBAAQA,IAAR,WAAmB,EAAxD,cAA8D,4BAC5DM,SAD4D,CAA9D;AAGA,WAAOC,MAAP;AACD,GAb+B;AAAA,CAAzB;;;AAeA,IAAIG,SAAS,GAAGL,cAAc,EAA9B","sourcesContent":["import React from 'react'\nimport _ from 'lodash/fp'\nimport F from 'futil'\nimport { mergeOrReturn } from './futil'\nimport { getDisplayName } from './react'\n\n// We populate the default theme by mutating this in src/layout/index.js, to\n// avoid importing withTheme-wrapped components before the function is defined.\nexport let defaultTheme = {}\nlet ThemeContext = React.createContext(defaultTheme)\n\nexport let ThemeProvider = ({ theme, children }) => {\n  theme = { ...defaultTheme, ...theme }\n  let Root = theme.Root || React.Fragment\n  return (\n    <ThemeContext.Provider value={theme}>\n      <Root>{children}</Root>\n    </ThemeContext.Provider>\n  )\n}\n\nlet hasNested = key => F.findIndexed((v, k) => _.startsWith(`${key}.`, k))\n\nexport let mergeNestedTheme = (theme, key) =>\n  F.when(\n    hasNested(key),\n    _.flow(\n      _.pickBy((val, k) => _.startsWith(`${key}.`, k)),\n      _.mapKeys(_.replace(`${key}.`, '')),\n      _.defaults(theme)\n    )\n  )(theme)\n\nexport let useTheme = (name, propTheme) =>\n  mergeOrReturn(\n    mergeNestedTheme(React.useContext(ThemeContext), name),\n    propTheme\n  )\n\nexport let ThemeConsumer = ({ name, children, theme }) => {\n  let newTheme = useTheme(name, theme)\n  return (\n    <ThemeContext.Provider value={newTheme}>\n      {children(newTheme)}\n    </ThemeContext.Provider>\n  )\n}\n\nexport let withNamedTheme = name => Component => {\n  let themed = ({ theme, ...props }) => {\n    let newTheme = useTheme(name, theme)\n    return (\n      <ThemeContext.Provider value={newTheme}>\n        <Component {...props} theme={newTheme} />\n      </ThemeContext.Provider>\n    )\n  }\n  themed.displayName = `withTheme${name ? `(\"${name}\")` : ''}(${getDisplayName(\n    Component\n  )})`\n  return themed\n}\n\nexport let withTheme = withNamedTheme()\n"],"file":"theme.js"}