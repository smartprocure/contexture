{"version":3,"sources":["../../src/utils/futil.js"],"names":["onlyWhen","f","F","unless","FlattenTreeLeaves","Tree","_","flow","flatten","omitBy","traverse","PlainObjectTree","tree","isPlainObject","flattenPlainObject","whenExists","canMerge","a","isEmpty","mergeOrReturn","curry","b","merge","aspectWrapper","aspect","after","result","console","info","onError","e","error"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;AAEA;AACO,IAAIA,QAAQ,GAAG,SAAXA,QAAW,CAAAC,CAAC;AAAA,SAAIC,CAAC,CAACC,MAAF,CAASF,CAAT,EAAY,YAAM,CAAE,CAApB,CAAJ;AAAA,CAAhB,C,CAEP;;;;;AACO,IAAIG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,IAAI;AAAA,SACjCC,eAAEC,IAAF,CAAOF,IAAI,CAACG,OAAL,EAAP,EAAuBF,eAAEG,MAAF,CAASJ,IAAI,CAACK,QAAd,CAAvB,CADiC;AAAA,CAA5B;;;AAEA,IAAIC,eAAe,GAAGT,CAAC,CAACU,IAAF,CAAOZ,QAAQ,CAACM,eAAEO,aAAH,CAAf,CAAtB;;AACA,IAAIC,kBAAkB,GAAGZ,CAAC,CAACa,UAAF,CAAaX,iBAAiB,CAACO,eAAD,CAA9B,CAAzB;;;AAEP,IAAIK,QAAQ,GAAG,SAAXA,QAAW,CAAAC,CAAC;AAAA,SAAI,CAACX,eAAEY,OAAF,CAAUD,CAAV,CAAD,IAAiBA,CAArB;AAAA,CAAhB;;AAEO,IAAIE,aAAa,GAAGb,eAAEc,KAAF,CACzB,UAACH,CAAD,EAAII,CAAJ;AAAA,SACGL,QAAQ,CAACC,CAAD,CAAR,IAAeD,QAAQ,CAACK,CAAD,CAAvB,IAA8Bf,eAAEgB,KAAF,CAAQL,CAAR,EAAWI,CAAX,CAA/B,IACAL,QAAQ,CAACC,CAAD,CADR,IAEAD,QAAQ,CAACK,CAAD,CAFR,IAGA,EAJF;AAAA,CADyB,CAApB;;;AAQA,IAAIE,aAAa,GAAGrB,CAAC,CAACsB,MAAF,CAAS;AAClCC,EAAAA,KAAK,EAAE,eAAAC,MAAM;AAAA,WAAIC,OAAO,CAACC,IAAR,CAAa,uBAAb,EAAsCF,MAAtC,CAAJ;AAAA,GADqB;AAElCG,EAAAA,OAAO,EAAE,iBAAAC,CAAC;AAAA,WAAIH,OAAO,CAACI,KAAR,CAAc,yBAAd,EAAyCD,CAAzC,CAAJ;AAAA;AAFwB,CAAT,CAApB","sourcesContent":["import _ from 'lodash/fp'\nimport * as F from 'futil'\n\n// Logic\nexport let onlyWhen = f => F.unless(f, () => {})\n\n// Tree\nexport let FlattenTreeLeaves = Tree =>\n  _.flow(Tree.flatten(), _.omitBy(Tree.traverse))\nexport let PlainObjectTree = F.tree(onlyWhen(_.isPlainObject))\nexport let flattenPlainObject = F.whenExists(FlattenTreeLeaves(PlainObjectTree))\n\nlet canMerge = a => !_.isEmpty(a) && a\n\nexport let mergeOrReturn = _.curry(\n  (a, b) =>\n    (canMerge(a) && canMerge(b) && _.merge(a, b)) ||\n    canMerge(a) ||\n    canMerge(b) ||\n    {}\n)\n\nexport let aspectWrapper = F.aspect({\n  after: result => console.info('\"after\" aspect fired!', result),\n  onError: e => console.error('\"onError\" aspect fired!', e),\n})\n"],"file":"futil.js"}