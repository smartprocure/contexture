{"version":3,"sources":["../../src/utils/search.js"],"names":["oppositeJoin","node","F","getOrReturn","randomString","Math","random","toString","substring","blankNode","key","newNodeFromType","_","curry","type","fields","pick","field","newNodeFromField","optionalNodeProps","get","transformNodeFromField","args","indent","Tree","parent","skipDefaultNode","wrapInGroup","toArray","path","join","add","getNode","getTypeLabel","tree","getOr","autoLabel","getTypeLabelOptions","types","map","label","value"],"mappings":"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","sourcesContent":["import F from 'futil'\nimport _ from 'lodash/fp'\nimport { defaultNodeProps } from './schema'\n\nexport let oppositeJoin = node =>\n  F.getOrReturn('join', node) === 'and' ? 'or' : 'and'\n\nexport let randomString = () => Math.random().toString(36).substring(7)\n\nexport let blankNode = () => ({ key: randomString() })\n\nexport let newNodeFromType = _.curry((type, fields, node) => ({\n  type,\n  ..._.pick(['key', 'field'], node),\n  ...defaultNodeProps(node.field, fields, type),\n}))\n\nexport let newNodeFromField = ({ field, fields, ...optionalNodeProps }) => {\n  let type = _.get([field, 'typeDefault'], fields)\n  return {\n    type,\n    field,\n    ...defaultNodeProps(field, fields, type),\n    ...optionalNodeProps,\n  }\n}\n\nexport let transformNodeFromField = args => node => ({\n  ..._.pick('key', node),\n  ...newNodeFromField(args),\n})\n\nexport let indent = (Tree, parent, node, skipDefaultNode) => {\n  // Reactors:\n  //   OR -> And, nothing\n  //   AND -> OR, others if has value\n  //   to/from NOT, others if has value\n  let key = randomString()\n  Tree.wrapInGroup(_.toArray(node.path), {\n    key,\n    join: oppositeJoin((parent || node).join),\n  })\n  if (!skipDefaultNode)\n    Tree.add(parent ? [...parent.path, key] : [key], blankNode())\n  return Tree.getNode([...parent.path, key])\n}\n\nexport let getTypeLabel = (tree, type) =>\n  _.getOr(F.autoLabel(type), ['types', type, 'label'], tree)\n\nexport let getTypeLabelOptions = _.curry((tree, types) =>\n  _.map(type => ({ label: getTypeLabel(tree, type), value: type }), types)\n)\n"],"file":"search.js"}