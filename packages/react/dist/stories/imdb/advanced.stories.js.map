{"version":3,"sources":["../../../src/stories/imdb/advanced.stories.js"],"names":["tree","key","type","join","schema","children","field","pageSize","page","schemas","then","_","merge","movies","fields","released","label","advanced","TypeMap","JSON","stringify","module","add"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAIA,IAAI,GAAG,4BAAW;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBC,EAAAA,IAAI,EAAE,OAFc;AAGpBC,EAAAA,IAAI,EAAE,KAHc;AAIpBC,EAAAA,MAAM,EAAE,QAJY;AAKpBC,EAAAA,QAAQ,EAAE,CACR;AACEJ,IAAAA,GAAG,EAAE,YADP;AAEEC,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE,KAHR;AAIEE,IAAAA,QAAQ,EAAE,CACR;AACEJ,MAAAA,GAAG,EAAE,aADP;AAEEC,MAAAA,IAAI,EAAE,OAFR;AAGEI,MAAAA,KAAK,EAAE;AAHT,KADQ,EAMR;AACEL,MAAAA,GAAG,EAAE,aADP;AAEEC,MAAAA,IAAI,EAAE,OAFR;AAGEI,MAAAA,KAAK,EAAE;AAHT,KANQ;AAJZ,GADQ,EAkBR;AACEL,IAAAA,GAAG,EAAE,SADP;AAEEC,IAAAA,IAAI,EAAE,SAFR;AAGEK,IAAAA,QAAQ,EAAE,EAHZ;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAlBQ;AALU,CAAX,CAAX;AAgCA,IAAIC,OAAO,GAAG,4BACZ,iCAAgBC,IAAhB,CACEC,eAAEC,KAAF,CAAQD,cAAR,EAAW;AACTE,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AADJ;AADF;AADC,CAAX,CADF,CADY,CAAd;;AAYA,IAAIC,QAAQ,GAAG,SAAXA,QAAW;AAAA,sBACb,gCAAC,UAAD;AAAS,IAAA,OAAO,EAAER;AAAlB,KACG,UAAAA,OAAO;AAAA,wBACN,0DACE,gCAAC,eAAD;AACE,MAAA,IAAI,EAAET,IADR;AAEE,MAAA,cAAc,EAAE,yBAAiBkB,qBAAjB,CAFlB;AAGE,MAAA,MAAM,EAAET,OAAO,CAACI,MAAR,CAAeC,MAHzB;AAIE,MAAA,IAAI,EAAE,CAAC,MAAD,EAAS,YAAT;AAJR,MADF,eAOE,yDACE,gCAAC,yBAAD;AAAa,MAAA,IAAI,EAAEd,IAAnB;AAAyB,MAAA,IAAI,EAAE,CAAC,MAAD,EAAS,SAAT;AAA/B,MADF,CAPF,eAUE,gCAAC,yBAAD;AACE,MAAA,IAAI,EAAEA,IADR;AAEE,MAAA,IAAI,EAAE,CAAC,MAAD,EAAS,SAAT,CAFR;AAGE,MAAA,MAAM,EAAES,OAAO,CAACI,MAAR,CAAeC;AAHzB,MAVF,eAeE,6CAAMK,IAAI,CAACC,SAAL,CAAepB,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAN,CAfF,CADM;AAAA,GADV,CADa;AAAA,CAAf;;AAwBA,uBAAU,4BAAV,EAAwCqB,MAAxC,EAAgDC,GAAhD,CAAoD,UAApD,EAAgEL,QAAhE","sourcesContent":["import _ from 'lodash/fp'\nimport React from 'react'\nimport { storiesOf } from '@storybook/react'\nimport { fromPromise } from 'mobx-utils'\nimport { QueryBuilder, Awaiter, componentForType } from '../..'\nimport Contexture, { updateSchemas } from './utils/contexture'\nimport { ResultCount, ResultTable, TypeMap } from '../../exampleTypes'\n\nlet tree = Contexture({\n  key: 'root',\n  type: 'group',\n  join: 'and',\n  schema: 'movies',\n  children: [\n    {\n      key: 'searchRoot',\n      type: 'group',\n      join: 'and',\n      children: [\n        {\n          key: 'searchQuery',\n          type: 'query',\n          field: 'title',\n        },\n        {\n          key: 'searchFacet',\n          type: 'facet',\n          field: 'genres',\n        },\n      ],\n    },\n    {\n      key: 'results',\n      type: 'results',\n      pageSize: 10,\n      page: 1,\n    },\n  ],\n})\n\nlet schemas = fromPromise(\n  updateSchemas().then(\n    _.merge(_, {\n      movies: {\n        fields: {\n          released: { label: 'Release Date' },\n        },\n      },\n    })\n  )\n)\n\nlet advanced = () => (\n  <Awaiter promise={schemas}>\n    {schemas => (\n      <div>\n        <QueryBuilder\n          tree={tree}\n          mapNodeToProps={componentForType(TypeMap)}\n          fields={schemas.movies.fields}\n          path={['root', 'searchRoot']}\n        />\n        <h1>\n          <ResultCount tree={tree} path={['root', 'results']} />\n        </h1>\n        <ResultTable\n          tree={tree}\n          path={['root', 'results']}\n          fields={schemas.movies.fields}\n        />\n        <pre>{JSON.stringify(tree, null, 2)}</pre>\n      </div>\n    )}\n  </Awaiter>\n)\n\nstoriesOf('Live Demos|Advanced Search', module).add('Advanced', advanced)\n"],"file":"advanced.stories.js"}