{"version":3,"sources":["../../../src/stories/imdb/filterList.js"],"names":["formatYear","x","Date","getUTCFullYear","tree","key","type","schema","children","field","min","max","key_field","value_field","interval","order","termDetailsTree","_","memoize","term","termTree","sortField","pageSize","mutate","values","schemas","then","merge","movies","fields","released","label","Story","state","selected","getValue","console","info","slice","flex","TypeMap","maxWidth","style","margin","props","F","lensProp","display","pick","overflowX","poster","theme"],"mappings":"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","sourcesContent":["import _ from 'lodash/fp'\nimport F from 'futil'\nimport React from 'react'\nimport { observable, autorun } from 'mobx'\nimport { fromPromise } from 'mobx-utils'\nimport { observer, inject } from 'mobx-react'\nimport Contexture, { updateSchemas } from './utils/contexture'\nimport {\n  FilterList,\n  Flex,\n  Awaiter,\n  SpacedList,\n  componentForType,\n  FilterAdder,\n} from '../..'\nimport theme, { DarkBox } from '../DemoControls'\nimport {\n  Query,\n  ResultCount,\n  PagedResultTable,\n  DateHistogram,\n  CheckableTermsStatsTable,\n  TypeMap,\n} from '../../exampleTypes'\nimport { ThemeProvider } from '../../utils/theme'\nimport { Column } from '../../greyVest/ExpandableTable'\n\nlet formatYear = x => new Date(x).getUTCFullYear()\n\nlet tree = Contexture({\n  key: 'searchRoot',\n  type: 'group',\n  schema: 'movies',\n  children: [\n    {\n      key: 'searchQuery',\n      type: 'query',\n      field: 'title',\n    },\n    {\n      key: 'criteria',\n      type: 'group',\n      children: [\n        {\n          key: 'searchNumber',\n          type: 'number',\n          field: 'metaScore',\n          min: 0,\n          max: 100,\n        },\n        {\n          key: 'searchFacet',\n          type: 'facet',\n          field: 'genres',\n        },\n        {\n          key: 'searchActors',\n          type: 'facet',\n          field: 'actors',\n        },\n      ],\n    },\n    {\n      key: 'results',\n      type: 'results',\n    },\n    {\n      key: 'releases',\n      type: 'dateHistogram',\n      key_field: 'released',\n      value_field: 'imdbVotes',\n      interval: '3650d',\n    },\n    {\n      key: 'genreScores',\n      type: 'terms_stats',\n      key_field: 'genres',\n      value_field: 'metaScore',\n      order: 'sum',\n    },\n  ],\n})\n\nlet termDetailsTree = _.memoize(term => {\n  let termTree = Contexture({\n    key: 'detailRoot',\n    type: 'group',\n    schema: 'movies',\n    children: [\n      {\n        key: 'detailFacet',\n        type: 'facet',\n        field: 'genres',\n      },\n      {\n        key: 'results',\n        type: 'results',\n        sortField: 'metaScore',\n        order: 'desc',\n        pageSize: 50,\n      },\n    ],\n  })\n\n  termTree.mutate(['detailRoot', 'detailFacet'], { values: [term] })\n  return termTree\n})\n\nlet schemas = fromPromise(\n  updateSchemas().then(\n    _.merge(_, {\n      movies: {\n        fields: {\n          released: { label: 'Release Date' },\n        },\n      },\n    })\n  )\n)\n\nconst Story = inject(() => {\n  let state = observable({\n    selected: [],\n  })\n  state.getValue = x => x.key\n  autorun(() => console.info(state.selected.slice()))\n  return { state }\n})(\n  observer(({ state }) => (\n    <DarkBox>\n      <Awaiter promise={schemas}>\n        {schemas => (\n          <SpacedList>\n            <Query tree={tree} path={['searchRoot', 'searchQuery']} />\n            <Flex>\n              <div style={{ flex: 1 }}>\n                <FilterList\n                  tree={tree}\n                  path={['searchRoot', 'criteria']}\n                  fields={schemas.movies.fields}\n                  mapNodeToProps={componentForType(TypeMap)}\n                />\n                <FilterAdder\n                  tree={tree}\n                  path={['searchRoot', 'criteria']}\n                  fields={schemas.movies.fields}\n                  uniqueFields\n                />\n              </div>\n              <div style={{ flex: 4, maxWidth: '80%' }}>\n                <ResultCount tree={tree} path={['searchRoot', 'results']} />\n                <DateHistogram\n                  tree={tree}\n                  path={['searchRoot', 'releases']}\n                  format={formatYear}\n                />\n                <CheckableTermsStatsTable\n                  tree={tree}\n                  criteria={['searchRoot', 'criteria']}\n                  path={['searchRoot', 'genreScores']}\n                  tableAttrs={{ style: { margin: 'auto' } }}\n                  Checkbox={props => <input type=\"checkbox\" {...props} />}\n                  selected={F.lensProp('selected', state)}\n                  getValue={state.getValue}\n                >\n                  <Column field=\"key\" label=\"Genre\" />\n                  <Column field=\"count\" label=\"Found\" enableSort />\n                  <Column field=\"avg\" label=\"Average\" enableSort />\n                  <Column\n                    field=\"key\"\n                    label=\"\"\n                    expand={{\n                      display: x =>\n                        `Show top 50 based on meta score for ${x} ▼`,\n                    }}\n                    collapse={{\n                      display: x =>\n                        `Hide top 50 based on meta score for ${x} ▲`,\n                    }}\n                  >\n                    {x => (\n                      <div>\n                        <PagedResultTable\n                          tree={termDetailsTree(x)}\n                          path={['detailRoot', 'results']}\n                          fields={_.pick(\n                            ['title', 'year', 'genres'],\n                            schemas.movies.fields\n                          )}\n                        />\n                      </div>\n                    )}\n                  </Column>\n                  <Column\n                    field=\"key\"\n                    label={() => <strong>Custom Header</strong>}\n                    expand={{ display: () => 'Expand me ▼' }}\n                    collapse={{ display: () => 'Hide me ▲' }}\n                  >\n                    {x => (\n                      <div>\n                        I just expand and show my parent value, which is{' '}\n                        <strong>{x}</strong>\n                      </div>\n                    )}\n                  </Column>\n                </CheckableTermsStatsTable>\n                <div style={{ overflowX: 'auto' }}>\n                  <PagedResultTable\n                    tree={tree}\n                    path={['searchRoot', 'results']}\n                    fields={{\n                      poster: {\n                        display: x => <img src={x} width=\"180\" height=\"270\" />,\n                        order: 1,\n                      },\n                    }}\n                    infer\n                  />\n                </div>\n              </div>\n            </Flex>\n          </SpacedList>\n        )}\n      </Awaiter>\n    </DarkBox>\n  ))\n)\n\nexport default () => (\n  <ThemeProvider theme={theme}>\n    <Story />\n  </ThemeProvider>\n)\n"],"file":"filterList.js"}