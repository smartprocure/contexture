{"version":3,"sources":["../../../../src/stories/imdb/utils/contexture.js"],"names":["esClient","elasticsearch","Client","apiVersion","host","types","exampleTypes","elasticsearchProvider","getClient","schemas","movies","index","type","highlight","inline","additional","modeMap","word","autocomplete","updateSchemas","_","memoize","console","info","typeMap","getSchemas","result","exampleTypeSchemaMapping","F","mergeOn","service","providers"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEO,IAAIA,QAAQ,GAAGC,iCAAcC,MAAd,CAAqB;AACzCC,EAAAA,UAAU,EAAE,KAD6B;AAEzCC,EAAAA,IAAI,EAAE;AAFmC,CAArB,CAAf;;;AAIA,IAAIC,KAAK,GAAGC,8BAAZ;;AAEP,IAAIC,qBAAqB,GAAG,yCAAa;AACvCC,EAAAA,SAAS,EAAE;AAAA,WAAMR,QAAN;AAAA,GAD4B;AAEvCK,EAAAA,KAAK,EAAE;AAFgC,CAAb,CAA5B;AAKO,IAAII,OAAO,GAAG;AACnBC,EAAAA,MAAM,EAAE;AACNT,IAAAA,aAAa,EAAE;AACbU,MAAAA,KAAK,EAAE,QADM;AAEbC,MAAAA,IAAI,EAAE,OAFO;AAGbC,MAAAA,SAAS,EAAE;AACTC,QAAAA,MAAM,EAAE,CAAC,OAAD,CADC;AAETC,QAAAA,UAAU,EAAE;AAFH;AAHE,KADT;AASNC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE,EADC;AAEPC,MAAAA,YAAY,EAAE;AAFP;AATH;AADW,CAAd;;;AAgBA,IAAIC,aAAa,GAAGC,eAAEC,OAAF,uEAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCC,UAAAA,OAAO,CAACC,IAAR,CAAa,2CAAb;AADmC,wBAEtBC,yBAFsB;AAAA;AAAA,iBAG3BjB,qBAAqB,CAACkB,UAAtB,EAH2B;;AAAA;AAAA;AAE/BC,UAAAA,MAF+B,eAEdC,wBAFc;AAKnCC,UAAAA,CAAC,CAACC,OAAF,CAAUpB,OAAV,EAAmBiB,MAAnB;AALmC,2CAM5BA,MAN4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAV,GAApB;;;AASA,IAAII,OAAO,GAAG,4BAAW;AAC9BrB,EAAAA,OAAO,EAAPA,OAD8B;AAE9BsB,EAAAA,SAAS,EAAE;AAAE9B,IAAAA,aAAa,EAAEM;AAAjB;AAFmB,CAAX,CAAd;;;eAIQ,gCAAe;AAC5B;AACAF,EAAAA,KAAK,EAALA,KAF4B;AAG5ByB,EAAAA,OAAO,EAAPA;AAH4B,CAAf,C","sourcesContent":["import _ from 'lodash/fp'\nimport * as F from 'futil'\nimport Contexture from 'contexture'\nimport { exampleTypes } from 'contexture-client'\nimport elasticsearch from 'elasticsearch-browser'\nimport contextureES from 'contexture-elasticsearch'\nimport contextureESTypes from 'contexture-elasticsearch/src/types'\nimport typeMap from 'contexture-elasticsearch/src/example-types/schemaMapping'\nimport ContextureMobx from '../../../utils/contexture-mobx'\n\nexport let esClient = elasticsearch.Client({\n  apiVersion: '6.0',\n  host: 'https://public-es-demo.smartprocure.us/',\n})\nexport let types = exampleTypes\n\nlet elasticsearchProvider = contextureES({\n  getClient: () => esClient,\n  types: contextureESTypes(),\n})\n\nexport let schemas = {\n  movies: {\n    elasticsearch: {\n      index: 'movies',\n      type: 'movie',\n      highlight: {\n        inline: ['title'],\n        additional: 'writers',\n      },\n    },\n    modeMap: {\n      word: '',\n      autocomplete: '.keyword',\n    },\n  },\n}\nexport let updateSchemas = _.memoize(async () => {\n  console.info('Dynamically reading elasticsearch schemas')\n  let result = typeMap.exampleTypeSchemaMapping(\n    await elasticsearchProvider.getSchemas()\n  )\n  F.mergeOn(schemas, result)\n  return result\n})\n\nexport let service = Contexture({\n  schemas,\n  providers: { elasticsearch: elasticsearchProvider },\n})\nexport default ContextureMobx({\n  // debug: true,\n  types,\n  service,\n})\n"],"file":"contexture.js"}