{"version":3,"sources":["../../../src/stories/imdb/searchButton.js"],"names":["formatYear","x","Date","getUTCFullYear","tree","key","type","schema","children","field","min","max","key_field","value_field","interval","order","disableAutoUpdate","schemas","then","_","merge","movies","fields","poster","display","released","label","blueBar","background","boxShadow","padding","whiteBox","margin","Story","alignItems","flex","marginLeft","F","flip","triggerUpdate","TypeMap","maxWidth","overflowX","theme"],"mappings":"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","sourcesContent":["import _ from 'lodash/fp'\nimport F from 'futil'\nimport React from 'react'\nimport { fromPromise } from 'mobx-utils'\nimport Contexture, { updateSchemas } from './utils/contexture'\nimport {\n  Flex,\n  Awaiter,\n  SpacedList,\n  FilterList,\n  componentForType,\n  FilterAdder,\n} from '../..'\nimport theme, { Button } from '../DemoControls'\nimport {\n  Query,\n  ResultCount,\n  PagedResultTable,\n  DateHistogram,\n  TermsStats,\n  TypeMap,\n} from '../../exampleTypes'\nimport { ThemeProvider } from '../../utils/theme'\n\nlet formatYear = x => new Date(x).getUTCFullYear()\n\nlet tree = Contexture({\n  key: 'searchRoot',\n  type: 'group',\n  schema: 'movies',\n  children: [\n    {\n      key: 'searchQuery',\n      type: 'query',\n      field: 'title',\n    },\n    {\n      key: 'criteria',\n      type: 'group',\n      children: [\n        {\n          key: 'searchNumber',\n          type: 'number',\n          field: 'metaScore',\n          min: 0,\n          max: 100,\n        },\n        {\n          key: 'searchFacet',\n          type: 'facet',\n          field: 'genres',\n        },\n        {\n          key: 'searchActors',\n          type: 'facet',\n          field: 'actors',\n        },\n      ],\n    },\n    {\n      key: 'results',\n      type: 'results',\n    },\n    {\n      key: 'releases',\n      type: 'dateHistogram',\n      key_field: 'released',\n      value_field: 'imdbVotes',\n      interval: '3650d',\n    },\n    {\n      key: 'genreScores',\n      type: 'terms_stats',\n      key_field: 'genres',\n      value_field: 'metaScore',\n      order: 'sum',\n    },\n  ],\n})\ntree.disableAutoUpdate = true\n\nlet schemas = fromPromise(\n  updateSchemas().then(\n    _.merge(_, {\n      movies: {\n        fields: {\n          poster: {\n            display: x => <img src={x} width=\"180\" height=\"270\" />,\n            order: 1,\n          },\n          released: { label: 'Release Date' },\n        },\n      },\n    })\n  )\n)\n\nlet blueBar = {\n  background: '#2a4466',\n  boxShadow: '0 0 4px rgba(0,0,0,.14), 0 4px 8px rgba(0,0,0,.28)',\n  padding: '10px',\n}\nlet whiteBox = {\n  boxShadow: '0 1px 3px 0 rgba(0,0,0,.08)',\n  background: '#fff',\n  padding: '15px',\n  margin: '15px',\n}\n\nlet Story = () => (\n  <Awaiter promise={schemas}>\n    {schemas => (\n      <div style={{ background: '#f4f4f4' }}>\n        <SpacedList>\n          <Flex style={{ alignItems: 'center', ...blueBar }}>\n            <div style={{ flex: 4 }}>\n              <Query tree={tree} path={['searchRoot', 'searchQuery']} />\n            </div>\n            <div style={{ flex: 1, marginLeft: '5px', display: 'flex' }}>\n              <input\n                type=\"checkbox\"\n                checked={!tree.disableAutoUpdate}\n                onChange={F.flip('disableAutoUpdate', tree)}\n              />\n              {tree.disableAutoUpdate && (\n                <Button onClick={tree.triggerUpdate}>Search</Button>\n              )}\n            </div>\n          </Flex>\n          <Flex>\n            <div style={{ flex: 1, ...whiteBox }}>\n              <FilterList\n                tree={tree}\n                path={['searchRoot', 'criteria']}\n                fields={schemas.movies.fields}\n                mapNodeToProps={componentForType(TypeMap)}\n              />\n              <FilterAdder\n                tree={tree}\n                path={['searchRoot', 'criteria']}\n                fields={schemas.movies.fields}\n                uniqueFields\n              />\n            </div>\n            <div style={{ flex: 4, maxWidth: '80%', ...whiteBox }}>\n              <ResultCount tree={tree} path={['searchRoot', 'results']} />\n              <DateHistogram\n                tree={tree}\n                path={['searchRoot', 'releases']}\n                format={formatYear}\n              />\n              <TermsStats tree={tree} path={['searchRoot', 'genreScores']} />\n              <div style={{ overflowX: 'auto' }}>\n                <PagedResultTable\n                  tree={tree}\n                  path={['searchRoot', 'results']}\n                  fields={schemas.movies.fields}\n                />\n              </div>\n            </div>\n          </Flex>\n        </SpacedList>\n      </div>\n    )}\n  </Awaiter>\n)\n\nexport default () => (\n  <ThemeProvider theme={theme}>\n    <Story />\n  </ThemeProvider>\n)\n"],"file":"searchButton.js"}