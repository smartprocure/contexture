{"version":3,"sources":["../../../src/stories/imdb/resultComponents.js"],"names":["tree","key","type","schema","children","field","min","max","include","disableAutoUpdate","state","showCards","divs","_","map","x","schemas","then","merge","movies","fields","released","label","poster","display","order","title","__html","genres","actors","tap","refresh","CheckboxResultTable","props","selected","React","useState","JSON","stringify","F","view","theme","margin","mergeOverAll","TypeMap","showBestRange","alignItems","triggerUpdate","justifyContent","value","val","padding"],"mappings":"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","sourcesContent":["import * as F from 'futil'\nimport _ from 'lodash/fp'\nimport React from 'react'\nimport { observable } from 'mobx'\nimport { fromPromise } from 'mobx-utils'\nimport { observer } from 'mobx-react'\nimport Contexture, { updateSchemas } from '../utils/contexture'\nimport { useTheme } from '../../../utils/theme'\nimport {\n  FilterList,\n  Flex,\n  Awaiter,\n  SpacedList,\n  Grid,\n  componentForType,\n  FilterAdder,\n} from '../..'\nimport {\n  ResultCount,\n  CheckableResultTable,\n  ResultPager,\n  TagsQuery,\n  TypeMap,\n} from '../../exampleTypes'\nimport IMDBCards from './components/IMDBCards'\n\nlet tree = Contexture({\n  key: 'root',\n  type: 'group',\n  schema: 'movies',\n  children: [\n    {\n      key: 'bar',\n      type: 'tagsQuery',\n      field: 'title',\n    },\n    {\n      key: 'criteria',\n      type: 'group',\n      children: [\n        {\n          key: 'searchNumber',\n          type: 'number',\n          field: 'metaScore',\n          min: 0,\n          max: 100,\n        },\n        {\n          key: 'searchFacet',\n          type: 'facet',\n          field: 'genres',\n        },\n        {\n          key: 'searchActors',\n          type: 'facet',\n          field: 'actors',\n        },\n      ],\n    },\n    {\n      key: 'results',\n      type: 'results',\n      include: [\n        '_checkbox',\n        'poster',\n        'title',\n        'actors',\n        'genres',\n        'rated',\n        'released',\n      ],\n    },\n  ],\n})\ntree.disableAutoUpdate = true\n\nlet state = observable({\n  showCards: true,\n})\n\nlet divs = _.map(x => <div key={x}>{x}</div>)\nlet schemas = fromPromise(\n  updateSchemas()\n    .then(\n      _.merge(_, {\n        movies: {\n          fields: {\n            released: { label: 'Release Date' },\n            poster: {\n              display: x => <img src={x} width=\"180\" height=\"270\" />,\n              order: 2,\n            },\n            title: {\n              display: x => <span dangerouslySetInnerHTML={{ __html: x }} />,\n              order: 1,\n            },\n            genres: { display: divs },\n            actors: { display: divs },\n          },\n        },\n      })\n    )\n    .then(_.tap(() => tree.refresh(['root'])))\n)\n\nlet CheckboxResultTable = observer(props => {\n  let selected = React.useState([])\n  return (\n    <div>\n      {JSON.stringify(F.view(selected))}\n      <CheckableResultTable {...{ selected, ...props }} />\n    </div>\n  )\n})\n\nexport default () => {\n  let theme = useTheme()\n  return (\n    <Awaiter promise={schemas}>\n      {schemas => (\n        <Grid gap=\"22px\" columns=\"1fr 4fr\" style={{ margin: '22px' }}>\n          <div>\n            <h1>Filters</h1>\n            <SpacedList>\n              <FilterList\n                tree={tree}\n                path={['root', 'criteria']}\n                fields={schemas.movies.fields}\n                mapNodeToProps={F.mergeOverAll([\n                  componentForType(TypeMap),\n                  field =>\n                    field.key === 'searchNumber' ? { showBestRange: true } : {},\n                ])}\n              />\n              <FilterAdder\n                tree={tree}\n                path={['root', 'criteria']}\n                fields={schemas.movies.fields}\n                uniqueFields\n              />\n            </SpacedList>\n          </div>\n          <div>\n            <Grid columns=\"1fr auto\" style={{ alignItems: 'center' }}>\n              <TagsQuery tree={tree} path={['root', 'bar']} />\n              {tree.disableAutoUpdate && (\n                <theme.Button onClick={tree.triggerUpdate} primary>\n                  Search\n                </theme.Button>\n              )}\n            </Grid>\n            <Flex\n              style={{\n                justifyContent: 'space-between',\n                alignItems: 'center',\n              }}\n            >\n              <h1>\n                Results (<ResultCount tree={tree} path={['root', 'results']} />)\n              </h1>\n              <Flex>\n                <theme.RadioList\n                  options={[\n                    { label: 'AutoSearch On', value: true },\n                    { label: 'AutoSearch Off', value: false },\n                  ]}\n                  value={!tree.disableAutoUpdate}\n                  onChange={val => {\n                    tree.disableAutoUpdate = !val\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <theme.Box>\n              <Flex>\n                <theme.RadioList\n                  options={[\n                    { label: 'Title Cards', value: true },\n                    { label: 'Checkable Table', value: false },\n                  ]}\n                  value={state.showCards}\n                  onChange={val => {\n                    state.showCards = val\n                  }}\n                />\n              </Flex>\n              {state.showCards ? (\n                <IMDBCards tree={tree} path={['root', 'results']} />\n              ) : (\n                <CheckboxResultTable\n                  tree={tree}\n                  fields={schemas[tree.tree.schema].fields}\n                  path={['root', 'results']}\n                  criteria={['root', 'criteria']}\n                  mapNodeToProps={componentForType(TypeMap)}\n                  getValue=\"title\"\n                />\n              )}\n              <Flex style={{ justifyContent: 'space-around', padding: '10px' }}>\n                <ResultPager tree={tree} path={['root', 'results']} />\n              </Flex>\n            </theme.Box>\n          </div>\n        </Grid>\n      )}\n    </Awaiter>\n  )\n}\n"],"file":"resultComponents.js"}