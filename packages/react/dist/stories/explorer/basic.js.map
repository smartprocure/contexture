{"version":3,"sources":["../../../src/stories/explorer/basic.js"],"names":["state","url","schemas","tree","savedSearch","showDebug","overrides","save","JSON","stringify","serialize","load","parse","refresh","then","F","mergeOn","overrideLookups","changeSchema","schema","key","type","join","children","page","lookups","display","ClampedHTML","_","each","field","eachIndexed","prop","propName","override","get","fields","updateEs","host","x","keys","Debug","value","blueBar","background","boxShadow","padding","whiteBox","margin","Story","e","target","map","sortBy","identity","flip","lensProp","width","TypeMap","flex","maxWidth","overflowX"],"mappings":"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","sourcesContent":["import React from 'react'\nimport _ from 'lodash/fp'\nimport * as F from 'futil'\nimport { observable } from 'mobx'\nimport { fromPromise } from 'mobx-utils'\nimport { observer } from 'mobx-react'\n\nimport {\n  QueryBuilder,\n  FilterList,\n  Awaiter,\n  Flex,\n  componentForType,\n  FilterAdder,\n} from '../../'\nimport { TextInput, ClampedHTML } from '../DemoControls'\nimport { ResultCount, PagedResultTable, TypeMap } from '../../exampleTypes'\n\nimport Contexture, { updateClient } from './contexture'\n\nlet state = observable({\n  url: '',\n  schemas: null,\n  tree: {},\n  savedSearch: '',\n  showDebug: false,\n  overrides: {},\n})\nlet save = () => {\n  state.savedSearch = JSON.stringify(state.tree.serialize(), null, 2)\n}\nlet load = () => {\n  state.tree = Contexture(JSON.parse(state.savedSearch))\n  state.tree.refresh()\n  state.schemas.then(schemas => {\n    F.mergeOn(schemas, overrideLookups(state.overrides))\n  })\n}\n\nlet changeSchema = schema => {\n  state.tree = Contexture({\n    key: 'root',\n    type: 'group',\n    join: 'and',\n    schema,\n    children: [\n      {\n        key: 'criteria',\n        type: 'group',\n        join: 'and',\n        children: [],\n      },\n      {\n        key: 'results',\n        type: 'results',\n        page: 1,\n      },\n    ],\n  })\n}\n\nlet lookups = {\n  display: {\n    ClampedHTML,\n  },\n}\nlet overrideLookups = _.each(schema => {\n  _.each(field => {\n    F.eachIndexed((prop, propName) => {\n      let override = _.get([propName, prop], lookups)\n      field[propName] = override || prop\n    }, field)\n  }, schema.fields)\n})\n\nlet updateEs = host => {\n  state.url = host\n  state.schemas = fromPromise(\n    updateClient({ host }).then(x => {\n      changeSchema(_.keys(x)[0])\n      return x\n    })\n  )\n}\n\nupdateEs('https://public-es-demo.smartprocure.us/')\n\nlet Debug = ({ value }) => <pre>{JSON.stringify(value, null, 2)}</pre>\n\nlet blueBar = {\n  background: '#2a4466',\n  boxShadow: '0 0 4px rgba(0,0,0,.14), 0 4px 8px rgba(0,0,0,.28)',\n  padding: '10px',\n}\nlet whiteBox = {\n  boxShadow: '0 1px 3px 0 rgba(0,0,0,.08)',\n  background: '#fff',\n  padding: '15px',\n  margin: '15px',\n}\n\nlet Story = observer(() => {\n  let { tree, schemas } = state\n  return (\n    <div style={{ background: '#f4f4f4' }}>\n      <TextInput value={state.url} onChange={e => updateEs(e.target.value)} />\n      {schemas && (\n        <Awaiter promise={schemas}>\n          {schemas =>\n            _.get('tree.schema', tree) && (\n              <div>\n                <div style={blueBar}>\n                  <select\n                    value={tree.schema}\n                    onChange={e => changeSchema(e.target.value)}\n                  >\n                    {_.map(\n                      x => (\n                        <option key={x}>{x}</option>\n                      ),\n                      _.sortBy(_.identity, _.keys(schemas))\n                    )}\n                  </select>\n                  <button onClick={save}>Save</button>\n                  <button onClick={load}>Load</button>\n                  <button onClick={F.flip(F.lensProp('showDebug', state))}>\n                    {state.showDebug ? 'Hide' : 'Show'} Dev Panel\n                  </button>\n                </div>\n                {state.showDebug && (\n                  <div>\n                    <Flex>\n                      <textarea\n                        style={{ width: '50%' }}\n                        value={state.savedSearch}\n                        onChange={e => {\n                          state.savedSearch = e.target.value\n                        }}\n                      />\n                      <Debug style={{ width: '50%' }} value={tree} />\n                    </Flex>\n                    Overrides:\n                    <textarea\n                      value={JSON.stringify(state.overrides)}\n                      onChange={e => {\n                        state.overrides = JSON.parse(e.target.value)\n                      }}\n                    />\n                    <QueryBuilder\n                      tree={tree}\n                      mapNodeToProps={componentForType(TypeMap)}\n                      fields={schemas[tree.tree.schema].fields}\n                      path={['root', 'criteria']}\n                    />\n                  </div>\n                )}\n                <div>\n                  <Flex>\n                    <div style={{ flex: 1, ...whiteBox }}>\n                      <FilterList\n                        tree={tree}\n                        path={['root', 'criteria']}\n                        mapNodeToProps={componentForType(TypeMap)}\n                        fields={schemas[tree.tree.schema].fields}\n                      />\n                      <FilterAdder\n                        tree={tree}\n                        path={['root', 'criteria']}\n                        fields={schemas[tree.tree.schema].fields}\n                        uniqueFields\n                      />\n                    </div>\n                    <div style={{ flex: 4, maxWidth: '80%', ...whiteBox }}>\n                      <ResultCount tree={tree} path={['root', 'results']} />\n                      <div style={{ overflowX: 'auto' }}>\n                        <PagedResultTable\n                          tree={tree}\n                          path={['root', 'results']}\n                          fields={schemas[tree.tree.schema].fields}\n                        />\n                      </div>\n                    </div>\n                  </Flex>\n                </div>\n              </div>\n            )\n          }\n        </Awaiter>\n      )}\n    </div>\n  )\n})\n\nexport default () => <Story />\n"],"file":"basic.js"}