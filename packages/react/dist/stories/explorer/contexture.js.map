{"version":3,"sources":["../../../src/stories/explorer/contexture.js"],"names":["es","client","updateClient","config","elasticsearch","Client","updateSchemas","elasticsearchProvider","getClient","types","schemas","console","info","typeMap","getSchemas","result","exampleTypeSchemaMapping","F","mergeOn","exampleTypes","service","providers"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEO,IAAIA,EAAE,GAAG;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAT;;;AACA,IAAIC,YAAY,GAAG,SAAfA,YAAe,CAAAC,MAAM,EAAI;AAClCH,EAAAA,EAAE,CAACC,MAAH,GAAYG,iCAAcC,MAAd,CAAqBF,MAArB,CAAZ;AACA,SAAOG,aAAa,EAApB;AACD,CAHM;;;AAIP,IAAIC,qBAAqB,GAAG,yCAAa;AACvCC,EAAAA,SAAS,EAAE;AAAA,WAAMR,EAAE,CAACC,MAAT;AAAA,GAD4B;AAEvCQ,EAAAA,KAAK,EAAE;AAFgC,CAAb,CAA5B;AAKO,IAAIC,OAAO,GAAG,EAAd;;;AACA,IAAIJ,aAAa;AAAA,qEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBK,YAAAA,OAAO,CAACC,IAAR,CAAa,2CAAb;AADyB,0BAEZC,yBAFY;AAAA;AAAA,mBAGjBN,qBAAqB,CAACO,UAAtB,EAHiB;;AAAA;AAAA;AAErBC,YAAAA,MAFqB,eAEJC,wBAFI;AAKzBC,YAAAA,CAAC,CAACC,OAAF,CAAUR,OAAV,EAAmBK,MAAnB;AALyB,6CAMlBA,MANkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbT,aAAa;AAAA;AAAA;AAAA,GAAjB;;;;eASQ,gCAAe;AAC5B;AACAG,EAAAA,KAAK,EAAEU,8BAFqB;AAG5BC,EAAAA,OAAO,EAAE,4BAAW;AAClBV,IAAAA,OAAO,EAAPA,OADkB;AAElBW,IAAAA,SAAS,EAAE;AAAEjB,MAAAA,aAAa,EAAEG;AAAjB;AAFO,GAAX;AAHmB,CAAf,C","sourcesContent":["import * as F from 'futil'\nimport Contexture from 'contexture'\nimport { exampleTypes } from 'contexture-client'\nimport elasticsearch from 'elasticsearch-browser'\nimport contextureES from 'contexture-elasticsearch'\nimport contextureESTypes from 'contexture-elasticsearch/src/types'\nimport typeMap from 'contexture-elasticsearch/src/example-types/schemaMapping'\nimport ContextureMobx from '../../utils/contexture-mobx'\n\nexport let es = { client: {} }\nexport let updateClient = config => {\n  es.client = elasticsearch.Client(config)\n  return updateSchemas()\n}\nlet elasticsearchProvider = contextureES({\n  getClient: () => es.client,\n  types: contextureESTypes(),\n})\n\nexport let schemas = {}\nexport let updateSchemas = async () => {\n  console.info('Dynamically reading elasticsearch schemas')\n  let result = typeMap.exampleTypeSchemaMapping(\n    await elasticsearchProvider.getSchemas()\n  )\n  F.mergeOn(schemas, result)\n  return result\n}\n\nexport default ContextureMobx({\n  // debug: true,\n  types: exampleTypes,\n  service: Contexture({\n    schemas,\n    providers: { elasticsearch: elasticsearchProvider },\n  }),\n})\n"],"file":"contexture.js"}