{"version":3,"sources":["../../../src/stories/explorer/advanced.js"],"names":["state","url","schemas","tree","savedSearch","showDebug","save","JSON","stringify","serialize","load","parse","refresh","changeSchema","schema","key","type","join","children","page","updateEs","host","then","x","_","keys","Debug","value","Story","e","target","get","map","sortBy","identity","F","flip","lensProp","width","TypeMap","fields"],"mappings":"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","sourcesContent":["import React from 'react'\nimport _ from 'lodash/fp'\nimport * as F from 'futil'\nimport { observable } from 'mobx'\nimport { fromPromise } from 'mobx-utils'\nimport { observer } from 'mobx-react'\n\nimport { Awaiter, Flex, QueryBuilder, componentForType } from '../../'\nimport { TextInput } from '../DemoControls'\nimport { ResultCount, ResultTable, TypeMap } from '../../exampleTypes'\n\nimport Contexture, { updateClient } from './contexture'\n\nlet state = observable({\n  url: '',\n  schemas: null,\n  tree: {},\n  savedSearch: '',\n  showDebug: false,\n})\nlet save = () => {\n  state.savedSearch = JSON.stringify(state.tree.serialize(), null, 2)\n}\nlet load = () => {\n  state.tree = Contexture(JSON.parse(state.savedSearch))\n  state.tree.refresh()\n}\n\nlet changeSchema = schema => {\n  state.tree = Contexture({\n    key: 'root',\n    type: 'group',\n    join: 'and',\n    schema,\n    children: [\n      {\n        key: 'criteria',\n        type: 'group',\n        join: 'and',\n        children: [{ key: 'firstFilter' }],\n      },\n      {\n        key: 'results',\n        type: 'results',\n        page: 1,\n      },\n    ],\n  })\n}\n\nlet updateEs = host => {\n  state.url = host\n  state.schemas = fromPromise(\n    updateClient({ host }).then(x => {\n      changeSchema(_.keys(x)[0])\n      return x\n    })\n  )\n}\n\nupdateEs('https://public-es-demo.smartprocure.us/')\n\nlet Debug = ({ value }) => <pre>{JSON.stringify(value, null, 2)}</pre>\n\nlet Story = observer(() => {\n  let { tree, schemas } = state\n  return (\n    <div>\n      <TextInput value={state.url} onChange={e => updateEs(e.target.value)} />\n      {schemas && (\n        <Awaiter promise={schemas}>\n          {schemas =>\n            _.get('tree.schema', tree) && (\n              <div>\n                <select\n                  value={tree.schema}\n                  onChange={e => changeSchema(e.target.value)}\n                >\n                  {_.map(\n                    x => (\n                      <option key={x}>{x}</option>\n                    ),\n                    _.sortBy(_.identity, _.keys(schemas))\n                  )}\n                </select>\n                <button onClick={save}>Save</button>\n                <button onClick={load}>Load</button>\n                <button onClick={F.flip(F.lensProp('showDebug', state))}>\n                  {state.showDebug ? 'Hide' : 'Show'} Dev Panel\n                </button>\n                {state.showDebug && (\n                  <Flex>\n                    <textarea\n                      style={{ width: '50%' }}\n                      value={state.savedSearch}\n                      onChange={e => {\n                        state.savedSearch = e.target.value\n                      }}\n                    />\n                    <Debug style={{ width: '50%' }} value={tree} />\n                  </Flex>\n                )}\n                <div>\n                  <QueryBuilder\n                    tree={tree}\n                    mapNodeToProps={componentForType(TypeMap)}\n                    fields={schemas[tree.tree.schema].fields}\n                    path={['root', 'criteria']}\n                  />\n                  <ResultCount tree={tree} path={['root', 'results']} />\n                  <ResultTable\n                    tree={tree}\n                    path={['root', 'results']}\n                    fields={schemas[tree.tree.schema].fields}\n                  />\n                </div>\n              </div>\n            )\n          }\n        </Awaiter>\n      )}\n    </div>\n  )\n})\n\nexport default () => <Story />\n"],"file":"advanced.js"}