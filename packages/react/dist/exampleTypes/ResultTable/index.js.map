{"version":3,"sources":["../../../src/exampleTypes/ResultTable/index.js"],"names":["getIncludes","schema","node","F","when","_","isEmpty","map","include","Tr","props","omit","ResultTable","fields","infer","path","criteria","tree","NoResultsComponent","IntroComponent","Row","getRowKey","mapNodeToProps","pageSizeOptions","Table","theme","Error","mutate","hasResults","get","flow","merge","applyDefaults","values","orderBy","includes","isIncluded","x","field","visibleFields","find","compact","hiddenFields","reject","headerProps","addOptions","addFilter","add","updating","mapIndexed","pageSize","background","maxWidth","position","bottom","left","markedForUpdate","PagedResultTable"],"mappings":"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","sourcesContent":["import React from 'react'\nimport _ from 'lodash/fp'\nimport * as F from 'futil'\nimport { fieldsToOptions } from '../../FilterAdder'\nimport { contexturify } from '../../utils/hoc'\nimport { applyDefaults, inferSchema } from '../../utils/schema'\nimport { newNodeFromField } from '../../utils/search'\nimport Header from './Header'\nimport TableBody from './TableBody'\nimport HighlightedColumnHeader from './HighlightedColumnHeader'\nimport ResultTableFooter from './ResultTableFooter'\n\nlet getIncludes = (schema, node) =>\n  F.when(_.isEmpty, _.map('field', schema))(node.include)\n\nlet Tr = props => (\n  <tr\n    {..._.omit(['record', 'fields', 'visibleFields', 'hiddenFields'], props)}\n  />\n)\n\nlet ResultTable = ({\n  fields,\n  infer,\n  path,\n  criteria,\n  node = {},\n  tree,\n  NoResultsComponent = 'No Results Found',\n  IntroComponent = null, // Initial component to be shown instead of the grid when no data has been loaded\n  Row = Tr, // accept a custom Row component so we can do fancy expansion things\n  getRowKey, // allow passing a custom function to generate unique row key\n  mapNodeToProps = () => ({}),\n  pageSizeOptions, // an array of options to set the # of rows per page (default [20, 50, 100, 250])\n  theme: { Table },\n}) => {\n  // If there are no fields, we won't render anything. This is most definitely a\n  // user error when it happens\n  if (_.isEmpty(fields) && !infer) throw new Error('Fields are empty')\n  // From Theme/Components\n  let mutate = tree.mutate(path)\n  // Account for all providers here (memory provider has results with no response parent)\n  let hasResults =\n    !!_.get('context.response.results.length', node) ||\n    !!_.get('context.results.length', node)\n  // NOTE infer + add columns does not work together (except for anything explicitly passed in)\n  //   When removing a field, it's not longer on the record, so infer can't pick it up since it runs per render\n  let schema = _.flow(\n    _.merge(infer && inferSchema(node)),\n    applyDefaults,\n    _.values,\n    _.orderBy('order', 'desc')\n  )(fields)\n  let includes = getIncludes(schema, node)\n  let isIncluded = x => _.includes(x.field, includes)\n  let visibleFields = _.flow(\n    _.map(field => _.find({ field }, schema)),\n    _.compact\n  )(includes)\n  let hiddenFields = _.reject(isIncluded, schema)\n\n  let headerProps = {\n    mapNodeToProps,\n    fields,\n    visibleFields,\n    includes,\n    addOptions: fieldsToOptions(hiddenFields),\n    addFilter: field => tree.add(criteria, newNodeFromField({ field, fields })),\n    tree,\n    node,\n    mutate,\n    criteria,\n  }\n  if (!node.updating && hasResults) {\n    return (\n      <>\n        <Table>\n          <thead>\n            <tr>\n              {F.mapIndexed(\n                x => (\n                  <Header key={x.field} field={x} {...headerProps} />\n                ),\n                visibleFields\n              )}\n              <HighlightedColumnHeader node={node} />\n            </tr>\n          </thead>\n          <TableBody\n            {...{\n              node,\n              fields,\n              visibleFields,\n              hiddenFields,\n              schema,\n              Row,\n              getRowKey,\n            }}\n          />\n        </Table>\n        {node.pageSize > 0 && (\n          <div\n            style={{\n              background: '#fff',\n              maxWidth: '50vw',\n              position: 'sticky',\n              bottom: 0,\n              left: '15px',\n            }}\n          >\n            <ResultTableFooter {...{ tree, node, path, pageSizeOptions }} />\n          </div>\n        )}\n      </>\n    )\n  }\n  if (!node.markedForUpdate && !node.updating && !hasResults) {\n    return NoResultsComponent\n  }\n  return IntroComponent\n}\n\nexport let PagedResultTable = contexturify(ResultTable)\nexport default PagedResultTable\n"],"file":"index.js"}