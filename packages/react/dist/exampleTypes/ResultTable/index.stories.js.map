{"version":3,"sources":["../../../src/exampleTypes/ResultTable/index.stories.js"],"names":["title","component","ResultTable","decorators","style","customizations","Table","x","a","label","order","HeaderCell","props","color","_","omit","b","hideRemoveColumn","c","hideMenu","Cell","flow","get","displayFieldOptional","tree","testTree","getNode","include","pagination","data","times","_id","value","random","key","schema","children","type","pageSize","service","debug","schemas","test","memory","records","providers","types","search","refresh"],"mappings":"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","sourcesContent":["import _ from 'lodash/fp'\nimport React from 'react'\nimport TestTree from '../stories/testTree'\nimport ThemePicker from '../../stories/themePicker'\nimport ResultTable from '.'\nimport { Observer } from 'mobx-react'\nimport { Box } from '../../greyVest'\nimport Contexture from 'contexture'\nimport ContextureMobx from '../../utils/contexture-mobx'\nimport memory from 'contexture/src/provider-memory'\nimport types from 'contexture/src/provider-memory/exampleTypes'\n\nexport default {\n  title: 'ExampleTypes | ResultTable',\n  component: ResultTable,\n  decorators: [ThemePicker('greyVest')],\n}\n\nlet style = (\n  <style>\n    {`\n    .example-table tr:nth-child(even) {\n      background-color: rgba(0, 0, 0, 0.5)\n    }\n    .example-table {\n      background: white;\n      color: #444;\n      border-collapse: collapse;\n    }\n    .example-table td, .example-table th {\n      padding: 5px\n    }\n    .example-table thead {\n      border-bottom: solid 2px #ccc\n    }\n  `}\n  </style>\n)\n\nexport let customizations = () => (\n  <div>\n    {style}\n    <ResultTable\n      tree={TestTree()}\n      path={['results']}\n      theme={{ Table: x => <table className=\"example-table\" {...x} /> }}\n      infer\n      fields={{\n        a: {\n          label: 'Colored Header',\n          order: -2,\n          HeaderCell: ({ style, ...props }) => (\n            <th\n              style={{ color: 'green', ...style }}\n              {..._.omit('activeFilter', props)}\n            />\n          ),\n        },\n        b: {\n          label: 'Hidden Remove Column',\n          order: -3,\n          hideRemoveColumn: true,\n          HeaderCell: ({ style, ...props }) => (\n            <th\n              style={{ color: 'gray', ...style }}\n              {..._.omit('activeFilter', props)}\n            />\n          ),\n        },\n        c: {\n          label: 'Hidden Menu',\n          order: -4,\n          hideMenu: true,\n          HeaderCell: ({ style, ...props }) => (\n            <th\n              style={{ color: 'gray', ...style }}\n              {..._.omit('activeFilter', props)}\n            />\n          ),\n        },\n        title: {\n          order: 1,\n          Cell: x => <td style={{ color: 'red' }} {...x} />,\n        },\n      }}\n      getRowKey={_.flow(_.get('_id'), x => `key-${x}`)}\n    />\n  </div>\n)\n\nexport let displayFieldOptional = () => {\n  let tree = TestTree(testTree => {\n    testTree.getNode(['results']).include = ['title', 'a', 'b']\n    return testTree\n  })\n  return (\n    <div>\n      <ResultTable\n        tree={tree}\n        path={['results']}\n        Table={x => <table className=\"example-table\" {...x} />}\n        fields={{\n          title: {\n            Cell: x => <td style={{ color: 'red' }} {...x} />,\n          },\n        }}\n      />\n    </div>\n  )\n}\n\nexport let pagination = () => {\n  let data = _.times(x => ({ _id: x, value: _.random(0, 20000) }), 221)\n  let tree = {\n    key: 'root',\n    schema: 'test',\n    children: [{ key: 'results', type: 'results', pageSize: 5 }],\n  }\n  let service = Contexture({\n    debug: true,\n    schemas: { test: { memory: { records: data } } },\n    providers: { memory: { ...memory, types: types() } },\n  })\n  let search = ContextureMobx({ service })(tree)\n  search.refresh(['root'])\n  return (\n    <Box>\n      <Observer>\n        {() => (\n          <ResultTable\n            fields={{ _id: { label: 'id' }, value: { label: 'val' } }}\n            tree={search}\n            path={['root', 'results']}\n          />\n        )}\n      </Observer>\n    </Box>\n  )\n}\n"],"file":"index.stories.js"}