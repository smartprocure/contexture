{"version":3,"sources":["../../src/exampleTypes/Number.js"],"names":["NumberComponent","tree","node","showBestRange","formatter","_","identity","significantDigits","theme","NumberInput","Button","alignItems","min","e","mutate","path","isNumber","toString","target","value","max","width","findBestRange","get","displayName"],"mappings":"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","sourcesContent":["import React from 'react'\nimport _ from 'lodash/fp'\nimport { round } from 'lodash'\nimport { Flex } from '../greyVest'\nimport { contexturify } from '../utils/hoc'\n\nlet NumberComponent = ({\n  tree,\n  node,\n  showBestRange = false,\n  formatter = _.identity,\n  significantDigits,\n  theme: { NumberInput, Button },\n}) => (\n  <div className=\"contexture-number\">\n    <Flex style={{ alignItems: 'center' }}>\n      <NumberInput\n        value={formatter(node.min) || ''}\n        onChange={e =>\n          tree.mutate(node.path, {\n            min: _.isNumber(significantDigits)\n              ? _.toString(round(e.target.value, significantDigits))\n              : e.target.value,\n          })\n        }\n      />\n      <div className=\"contexture-number-separator\">-</div>\n      <NumberInput\n        value={formatter(node.max) || ''}\n        onChange={e =>\n          tree.mutate(node.path, {\n            max: _.isNumber(significantDigits)\n              ? _.toString(round(e.target.value, significantDigits))\n              : e.target.value,\n          })\n        }\n      />\n    </Flex>\n    {showBestRange && (\n      <div className=\"contexture-number-best-range\">\n        <Button\n          style={{ width: '100%' }}\n          onClick={async () => {\n            // Calculate best range\n            await tree.mutate(node.path, { findBestRange: true })\n            let { min, max } = _.get('context.bestRange', node)\n            if (_.isNumber(significantDigits)) {\n              min = round(min, significantDigits)\n              max = round(max, significantDigits)\n            }\n            // Disable best range so the calculation isn't run anymore\n            tree.mutate(node.path, {\n              findBestRange: false,\n              min,\n              max,\n            })\n          }}\n        >\n          Find best range\n        </Button>\n      </div>\n    )}\n  </div>\n)\n\nNumberComponent.displayName = 'Number'\n\nexport default contexturify(NumberComponent)\n"],"file":"Number.js"}