{"version":3,"sources":["../../src/exampleTypes/Geo.js"],"names":["customStyles","valueContainer","styles","overflow","textOverflow","elementStyle","flex","marginBottom","operatorOptions","GeoComponent","tree","node","loadOptions","GeoCodeLocation","_","noop","AutoComplete","placeholder","theme","Select","NumberInput","flexFlow","operator","e","mutate","path","target","value","F","autoLabelOptions","radius","location","document","body","newValue","replace","label","data","latitude","longitude"],"mappings":"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","sourcesContent":["import React from 'react'\nimport _ from 'lodash/fp'\nimport F from 'futil'\nimport { Flex } from '../greyVest'\nimport { contexturify } from '../utils/hoc'\n\nconst customStyles = {\n  valueContainer: styles => ({\n    ...styles,\n    ...{\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    },\n  }),\n}\n\nconst elementStyle = {\n  flex: 1,\n  marginBottom: '5px',\n}\n\nconst operatorOptions = ['within', 'not within']\n\nlet GeoComponent = ({\n  tree,\n  node,\n  loadOptions,\n  GeoCodeLocation = _.noop,\n  AutoComplete = null,\n  placeholder = 'Address ...',\n  theme: { Select, NumberInput },\n}) => (\n  <Flex style={{ flexFlow: 'column' }}>\n    <Select\n      style={elementStyle}\n      value={node.operator}\n      onChange={e => tree.mutate(node.path, { operator: e.target.value })}\n      options={F.autoLabelOptions(operatorOptions)}\n    />\n    <div style={elementStyle}>\n      <NumberInput\n        min=\"1\"\n        value={node.radius}\n        onChange={e => tree.mutate(node.path, { radius: e.target.value })}\n        placeholder=\"Enter number of miles ...\"\n      />{' '}\n      from\n    </div>\n    <div style={elementStyle}>\n      {AutoComplete && (\n        <AutoComplete\n          cacheOptions\n          escapeClearsValue\n          defaultInputValue={node.location}\n          placeholder={placeholder}\n          noOptionsMessage={() => ''}\n          menuPortalTarget={document.body}\n          menuShouldScrollIntoView={true}\n          styles={customStyles}\n          loadOptions={loadOptions}\n          onInputChange={newValue => newValue.replace(/[^a-zA-Z0-9\\s]+/g, '')}\n          onChange={async ({ label, value }) => {\n            let data = await GeoCodeLocation(value)\n            if (data && data.latitude && data.longitude) {\n              tree.mutate(node.path, {\n                latitude: data.latitude,\n                longitude: data.longitude,\n                location: label,\n              })\n            }\n          }}\n        />\n      )}\n      {!AutoComplete && <div>Autocomplete component is required!</div>}\n    </div>\n  </Flex>\n)\n\nexport default contexturify(GeoComponent)\n"],"file":"Geo.js"}