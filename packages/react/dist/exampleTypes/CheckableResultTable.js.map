{"version":3,"sources":["../../src/exampleTypes/CheckableResultTable.js"],"names":["Label","_","flow","observer","withTheme","node","selected","getValue","Checkbox","theme","results","toArray","allChecked","size","F","view","checkAll","sets","map","getRecord","iteratee","CheckableResultTable","fields","selectedValues","onChange","props","_checkbox","hideMenu","label","display","x","y","domLens","checkboxValues","selectedBinding","contexturify"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAIA,KAAK,GAAGC,eAAEC,IAAF,CACV,+BAAe,OAAf,CADU,EAEVC,mBAFU,EAGVC,gBAHU,EAIV,gBAAuD;AAAA,MAApDC,IAAoD,QAApDA,IAAoD;AAAA,MAA9CC,QAA8C,QAA9CA,QAA8C;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;AAAA,MAAjBC,QAAiB,QAA1BC,KAA0B,CAAjBD,QAAiB;;AACvD,MAAIE,OAAO,GAAGT,eAAEU,OAAF,CAAU,wBAAWN,IAAX,CAAV,CAAd;;AACA,MAAIO,UAAU,GAAGX,eAAEY,IAAF,CAAOH,OAAP,MAAoBT,eAAEY,IAAF,CAAOC,kBAAEC,IAAF,CAAOT,QAAP,CAAP,CAArC;;AACA,MAAIU,QAAQ,GAAGF,kBAAEG,IAAF,CACbL,UAAU,GAAG,EAAH,GAAQX,eAAEiB,GAAF,CAAMjB,eAAEC,IAAF,CAAOiB,iBAAP,EAAkBlB,eAAEmB,QAAF,CAAWb,QAAX,CAAlB,CAAN,EAA+CG,OAA/C,CADL,EAEbJ,QAFa,CAAf;;AAIA,sBAAO,gCAAC,QAAD;AAAU,IAAA,OAAO,EAAEM,UAAnB;AAA+B,IAAA,QAAQ,EAAEI;AAAzC,IAAP;AACD,CAZW,CAAZ,C,CAcA;AACA;AACA;;;AACA,IAAIK,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,MACzBhB,IADyB,SACzBA,IADyB;AAAA,MAEzBiB,MAFyB,SAEzBA,MAFyB;AAAA,MAGzBC,cAHyB,SAGzBA,cAHyB;AAAA,MAIzBC,QAJyB,SAIzBA,QAJyB;AAAA,MAKzBjB,QALyB,SAKzBA,QALyB;AAAA,MAMhBC,QANgB,SAMzBC,KANyB,CAMhBD,QANgB;AAAA,MAOtBiB,KAPsB;;AAAA,sBASzB,gCAAC,6BAAD;AACE,IAAA,MAAM;AACJC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE,IADD;AAETC,QAAAA,KAAK,EAAE;AAAA,8BACL,gCAAC,KAAD,EACM;AAAEvB,YAAAA,IAAI,EAAJA,IAAF;AAAQC,YAAAA,QAAQ,EAAE,CAACiB,cAAD,EAAiBC,QAAjB,CAAlB;AAA8CjB,YAAAA,QAAQ,EAARA;AAA9C,WADN,CADK;AAAA,SAFE;AAOTsB,QAAAA,OAAO,EAAE,iBAACC,CAAD,EAAIC,CAAJ;AAAA,8BACP,gCAAC,QAAD,EACMjB,kBAAEkB,OAAF,CAAUC,cAAV,CAAyBhC,eAAEmB,QAAF,CAAWb,QAAX,EAAqBwB,CAArB,CAAzB,EAAkD,CACpDR,cADoD,EAEpDC,QAFoD,CAAlD,CADN,CADO;AAAA;AAPA;AADP,OAiBDF,MAjBC;AADR,KAoBMG,KApBN,EATyB;AAAA,CAA3B;;eAiCexB,eAAEC,IAAF,CACb,wBAAW,UAAX,EAAuBgC,sBAAvB,CADa,EAEbC,iBAFa,EAGbd,oBAHa,C","sourcesContent":["import React from 'react'\nimport _ from 'lodash/fp'\nimport F from 'futil'\nimport { setDisplayName } from 'recompose'\nimport { observer } from 'mobx-react'\nimport { getResults, getRecord } from '../utils/schema'\nimport { contexturify } from '../utils/hoc'\nimport { withTheme } from '../utils/theme'\nimport { PagedResultTable } from './ResultTable'\nimport { selectedBinding } from './utils'\nimport { expandProp } from '../utils/react'\n\nlet Label = _.flow(\n  setDisplayName('Label'),\n  observer,\n  withTheme\n)(({ node, selected, getValue, theme: { Checkbox } }) => {\n  let results = _.toArray(getResults(node))\n  let allChecked = _.size(results) === _.size(F.view(selected))\n  let checkAll = F.sets(\n    allChecked ? [] : _.map(_.flow(getRecord, _.iteratee(getValue)), results),\n    selected\n  )\n  return <Checkbox checked={allChecked} onChange={checkAll} />\n})\n\n// Extends ResultTable with a checkbox column\n// Writes to a lens called `selected`, using getValue to map the selected record to a value.\n// getValues uses _.iteratee, so it defaults to identity and supports things like strings to get props\nlet CheckableResultTable = ({\n  node,\n  fields,\n  selectedValues,\n  onChange,\n  getValue,\n  theme: { Checkbox },\n  ...props\n}) => (\n  <PagedResultTable\n    fields={{\n      _checkbox: {\n        hideMenu: true,\n        label: () => (\n          <Label\n            {...{ node, selected: [selectedValues, onChange], getValue }}\n          />\n        ),\n        display: (x, y) => (\n          <Checkbox\n            {...F.domLens.checkboxValues(_.iteratee(getValue)(y), [\n              selectedValues,\n              onChange,\n            ])}\n          />\n        ),\n      },\n      ...fields,\n    }}\n    {...props}\n  />\n)\n\nexport default _.flow(\n  expandProp('selected', selectedBinding),\n  contexturify\n)(CheckableResultTable)\n"],"file":"CheckableResultTable.js"}