{"version":3,"sources":["../../src/exampleTypes/TermsStatsTable.js"],"names":["toolBarStyle","justifyContent","alignItems","SimpleLabel","text","paddingRight","SimpleFilter","_","flow","observer","withTheme","TextInput","theme","props","width","SelectSize","node","tree","options","Select","marginLeft","e","mutate","path","size","target","value","getOr","map","x","label","TermsStatsTable","criteria","criteriaField","criteriaFieldLabel","criteriaGetValue","identity","children","sizeOptions","Button","margin","F","domLens","lens","compact","display","record","field","key_field","filter","find","getNode","get","add","type","findLast","mode","values","uniq","key","context","terms","order","sortDir","column","enableSort"],"mappings":"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","sourcesContent":["import _ from 'lodash/fp'\nimport F from 'futil'\nimport React from 'react'\nimport { observer } from 'mobx-react'\nimport { contexturify } from '../utils/hoc'\nimport { withTheme } from '../utils/theme'\nimport { ExpandableTable, Column, Flex } from '../greyVest/'\nimport { setDisplayName } from 'recompose'\n\nlet toolBarStyle = { justifyContent: 'space-between', alignItems: 'center' }\nlet SimpleLabel = ({ text }) => (\n  <label style={{ paddingRight: '5px' }}>{text}</label>\n)\nlet SimpleFilter = _.flow(\n  setDisplayName('SimpleFilter'),\n  observer,\n  withTheme\n)(({ theme: { TextInput }, ...props }) => (\n  <Flex style={{ ...toolBarStyle, width: '75%' }}>\n    <SimpleLabel text=\"Filter:\" />\n    <TextInput {...props} />\n  </Flex>\n))\n\nlet SelectSize = _.flow(\n  setDisplayName('SelectSize'),\n  observer,\n  withTheme\n)(\n  ({\n    node,\n    tree,\n    options = [10, 25, 50, 100, 500, 1000],\n    theme: { Select },\n  }) => (\n    <Flex style={{marginLeft: 12, ...toolBarStyle}}>\n      <SimpleLabel text=\"Size:\" />\n      <Select\n        onChange={e => {\n          tree.mutate(node.path, { size: e.target.value })\n        }}\n        value={_.getOr(25, 'size', node)}\n        placeholder={null}\n        style={{ width: '100px' }}\n        options={_.map(x => ({ value: x, label: x }), options)}\n      />\n    </Flex>\n  )\n)\n\nlet TermsStatsTable = ({\n  node,\n  criteria,\n  criteriaField,\n  criteriaFieldLabel = '',\n  criteriaGetValue = _.identity,\n  tree,\n  children,\n  sizeOptions,\n  theme: { Button },\n  ...props\n}) => (\n  <div>\n    <Flex style={{ ...toolBarStyle, margin: '0 8px' }}>\n      <SimpleFilter {...F.domLens.value(tree.lens(node.path, 'filter'))} />\n      <SelectSize node={node} tree={tree} options={sizeOptions} />\n    </Flex>\n    <ExpandableTable\n      {...{\n        ...props,\n        children: criteria\n          ? [\n              ..._.compact(children),\n              <Column\n                label={criteriaFieldLabel}\n                expand={{\n                  display: (value, record) => (\n                    <div>\n                      <Button\n                        onClick={async () => {\n                          let field = criteriaField || node.key_field\n                          let filter =\n                            criteria &&\n                            _.find({ field }, tree.getNode(criteria).children)\n                          if (!filter || _.get('mode', filter) === 'exclude') {\n                            await tree.add(criteria, {\n                              field,\n                              type: 'facet',\n                            })\n                            filter = _.findLast(\n                              { field },\n                              tree.getNode(criteria).children\n                            )\n                          }\n                          await tree.mutate(filter.path, {\n                            mode: 'include',\n                            values: _.uniq([\n                              ..._.getOr([], 'values', filter),\n                              criteriaGetValue(record.key),\n                            ]),\n                          })\n                        }}\n                      >\n                        Add as Filter\n                      </Button>\n                    </div>\n                  ),\n                }}\n              />,\n            ]\n          : _.compact(children),\n      }}\n      data={node.context.terms}\n      sortField={node.order}\n      sortDir={node.sortDir}\n      columnSort={column => {\n        if (column.field !== 'key' && column.enableSort) {\n          tree.mutate(node.path, {\n            order: column.field,\n            sortDir: column.sortDir,\n          })\n        }\n      }}\n    />\n  </div>\n)\n\nexport default contexturify(TermsStatsTable)\n"],"file":"TermsStatsTable.js"}