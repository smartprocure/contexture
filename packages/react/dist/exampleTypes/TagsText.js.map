{"version":3,"sources":["../../src/exampleTypes/TagsText.js"],"names":["operatorOptions","F","autoLabelOptions","value","label","Text","tree","node","placeholder","theme","Select","TagsInput","Popover","open","React","useState","selectedTag","setSelectedTag","operator","e","mutate","path","target","values","tag","on","_","without","join","triggerUpdate"],"mappings":"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","sourcesContent":["import React from 'react'\nimport _ from 'lodash/fp'\nimport F from 'futil'\nimport { contexturify } from '../utils/hoc'\nimport { bgJoin } from '../styles/generic'\n\nimport TagsJoinPicker, { tagToGroupJoin } from './TagsJoinPicker'\n\nlet operatorOptions = F.autoLabelOptions([\n  { value: 'containsWord', label: 'Field Contains' },\n  { value: 'wordStartsWith', label: 'Word Starts With' },\n  { value: 'wordEndsWith', label: 'Word Ends With' },\n  { value: 'containsExact', label: 'Word Is Exactly' },\n  { value: 'startsWith', label: 'Field Starts With' },\n  { value: 'endsWith', label: 'Field Ends With' },\n  { value: 'is', label: 'Field Is Exactly' },\n  // { value: 'isNot', label: 'Is Not' },\n  // { value: 'contains', label: 'Contains'},\n  // { value: 'doesNotContain', label: 'Does Not Contain'}\n])\n\nlet Text = ({\n  tree,\n  node,\n  placeholder,\n  theme: { Select, TagsInput, Popover },\n}) => {\n  let open = React.useState(false)\n  let [selectedTag, setSelectedTag] = React.useState(null)\n  return (\n    <div className=\"contexture-text\">\n      <Select\n        value={node.operator}\n        onChange={e => tree.mutate(node.path, { operator: e.target.value })}\n        options={operatorOptions}\n      />\n      <TagsInput\n        splitCommas\n        tags={node.values}\n        onTagClick={tag => {\n          F.on(open)()\n          setSelectedTag(tag)\n        }}\n        addTag={tag => {\n          tree.mutate(node.path, { values: [...node.values, tag] })\n        }}\n        removeTag={tag => {\n          tree.mutate(node.path, {\n            values: _.without([tag], node.values),\n          })\n        }}\n        tagStyle={bgJoin(tagToGroupJoin(node.join))}\n        submit={tree.triggerUpdate}\n        placeholder={placeholder}\n      />\n      <Popover open={open}>\n        <TagsJoinPicker tag={selectedTag} node={node} tree={tree} />\n      </Popover>\n    </div>\n  )\n}\n\nexport default contexturify(Text)\n"],"file":"TagsText.js"}