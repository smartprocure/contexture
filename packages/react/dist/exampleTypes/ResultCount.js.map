{"version":3,"sources":["../../src/exampleTypes/ResultCount.js"],"names":["ResultCount","node","display","toNumber","count","F","cascade","totalRecords","_","flow","observer","withNode","withInlineLoader"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAIA,WAAW,GAAG,SAAdA,WAAc,OAAkC;AAAA,MAA/BC,IAA+B,QAA/BA,IAA+B;AAAA,0BAAzBC,OAAyB;AAAA,MAAzBA,OAAyB,6BAAfC,gBAAe;;AAClD,MAAIC,KAAK,GAAGC,kBAAEC,OAAF,CACV,CAAC,iCAAD,EAAoC,wBAApC,CADU,EAEVL,IAFU,CAAZ;;AAIA,MAAIM,YAAY,GAAGH,KAAK,GACpBC,kBAAEC,OAAF,CAAU,CAAC,+BAAD,EAAkC,sBAAlC,CAAV,EAAqEL,IAArE,CADoB,GAEpB,CAFJ;AAGA,SAAOG,KAAK,GAAGF,OAAO,CAACK,YAAD,CAAV,GAA2B,YAAvC;AACD,CATD;;eAWeC,eAAEC,IAAF,CAAOC,mBAAP,EAAiBC,aAAjB,EAA2BC,qBAA3B,EAA6CZ,WAA7C,C","sourcesContent":["import _ from 'lodash/fp'\nimport F from 'futil'\nimport { observer } from 'mobx-react'\nimport { withNode, withInlineLoader } from '../utils/hoc'\nimport { toNumber } from '../utils/format'\n\nlet ResultCount = ({ node, display = toNumber }) => {\n  let count = F.cascade(\n    ['context.response.results.length', 'context.results.length'],\n    node\n  )\n  let totalRecords = count\n    ? F.cascade(['context.response.totalRecords', 'context.totalRecords'], node)\n    : 0\n  return count ? display(totalRecords) : 'No Results'\n}\n\nexport default _.flow(observer, withNode, withInlineLoader)(ResultCount)\n"],"file":"ResultCount.js"}