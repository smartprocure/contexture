{"version":3,"sources":["../../src/queryBuilder/FilterContents.js"],"names":["FilterContents","node","tree","fields","mapNodeToProps","_","noop","theme","Select","UnmappedNodeComponent","nodeField","typeOptions","get","type","includes","nodeLabel","width","field","replace","path","margin","target","value","F","when","isNil","undefined","display","verticalAlign","marginRight","component","flow","observer","withTheme"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,cAAc,GAAG,SAAjBA,cAAiB,OAMf;AAAA,MALJC,IAKI,QALJA,IAKI;AAAA,MAJJC,IAII,QAJJA,IAII;AAAA,MAHJC,MAGI,QAHJA,MAGI;AAAA,iCAFJC,cAEI;AAAA,MAFJA,cAEI,oCAFaC,eAAEC,IAEf;AAAA,wBADJC,KACI;AAAA,MADKC,MACL,cADKA,MACL;AAAA,MADaC,qBACb,cADaA,qBACb;AACJ;AACA;AACA;AACA,MAAIC,SAAS,GAAG,oBAAIT,IAAJ,EAAU,OAAV,CAAhB;AACA,MAAIU,WAAW,GAAGN,eAAEO,GAAF,CAAM,CAACF,SAAD,EAAY,aAAZ,CAAN,EAAkCP,MAAlC,KAA6C,EAA/D;AACA,MAAIF,IAAI,CAACY,IAAL,IAAa,CAACR,eAAES,QAAF,CAAWb,IAAI,CAACY,IAAhB,EAAsBF,WAAtB,CAAlB,EACEA,WAAW,gCAAOA,WAAP,IAAoBV,IAAI,CAACY,IAAzB,EAAX;AACF,MAAIE,SAAS,GAAGV,eAAEO,GAAF,CAAM,CAACF,SAAD,EAAY,OAAZ,CAAN,EAA4BP,MAA5B,KAAuCO,SAAvD;AACA,sBACE,gCAAC,cAAD;AAAM,IAAA,OAAO,EAAC,0BAAd;AAAyC,IAAA,KAAK,EAAE;AAAEM,MAAAA,KAAK,EAAE;AAAT;AAAhD,kBACE,gCAAC,sBAAD;AACE,IAAA,KAAK,EAAEN,SAAS,GAAGK,SAAH,GAAe,cADjC;AAEE,IAAA,OAAO,EAAE,kCAAgBZ,MAAhB,CAFX;AAGE,IAAA,QAAQ,EAAE,kBAAAc,KAAK;AAAA,aACbf,IAAI,CAACgB,OAAL,CAAajB,IAAI,CAACkB,IAAlB,EAAwB,oCAAuB;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASd,QAAAA,MAAM,EAANA;AAAT,OAAvB,CAAxB,CADa;AAAA;AAHjB,IADF,EAQGO,SAAS,iBACR;AAAK,IAAA,KAAK,EAAE;AAAEU,MAAAA,MAAM,EAAE;AAAV;AAAZ,kBACE,gCAAC,MAAD;AACE,IAAA,QAAQ,EAAE,yBAAiC;AAAA,UAAbP,IAAa,SAA9BQ,MAA8B,CAApBC,KAAoB;AACzCpB,MAAAA,IAAI,CAACgB,OAAL,CAAajB,IAAI,CAACkB,IAAlB,EAAwB,6BAAgBN,IAAhB,EAAsBV,MAAtB,EAA8BF,IAA9B,CAAxB;AACD,KAHH;AAIE,IAAA,WAAW,EAAC,aAJd;AAKE,IAAA,KAAK,EAAEsB,CAAC,CAACC,IAAF,CAAOnB,eAAEoB,KAAT,EAAgBC,SAAhB,EAA2BzB,IAAI,CAACY,IAAhC,CALT,CAKgD;AALhD;AAME,IAAA,OAAO,EAAE,iCAAoBX,IAApB,EAA0BS,WAA1B;AANX,IADF,CATJ,EAoBGV,IAAI,CAACY,IAAL,iBACC;AACE,IAAA,KAAK,EAAE;AACLc,MAAAA,OAAO,EAAE,cADJ;AAELC,MAAAA,aAAa,EAAE,KAFV;AAGLZ,MAAAA,KAAK,EAAE,MAHF;AAILa,MAAAA,WAAW,EAAE;AAJR;AADT,kBAQE,gCAAC,iBAAD;AAEIC,IAAAA,SAAS,EAAErB,qBAFf;AAGIP,IAAAA,IAAI,EAAJA,IAHJ;AAIID,IAAAA,IAAI,EAAJA;AAJJ,KAKOG,cAAc,CAACH,IAAD,EAAOE,MAAP,CALrB,EARF,CArBJ,CADF;AA0CD,CAzDD;;eA2DeE,eAAE0B,IAAF,CAAOC,mBAAP,EAAiBC,gBAAjB,EAA4BjC,cAA5B,C","sourcesContent":["import * as F from 'futil'\nimport _ from 'lodash/fp'\nimport React from 'react'\nimport { observer } from 'mobx-react'\nimport { Dynamic, Grid } from '../greyVest/'\nimport { ModalPicker } from '../purgatory'\nimport { fieldsToOptions } from '../FilterAdder'\nimport { get } from '../utils/mobx-utils'\nimport {\n  newNodeFromType,\n  transformNodeFromField,\n  getTypeLabelOptions,\n} from '../utils/search'\nimport { withTheme } from '../utils/theme'\n\nlet FilterContents = ({\n  node,\n  tree,\n  fields,\n  mapNodeToProps = _.noop,\n  theme: { Select, UnmappedNodeComponent },\n}) => {\n  // `get` allows us to create a mobx dependency on field before we know it\n  // exists (because the client will only add it if it's a type that uses it\n  // as it wouldn't make sense for something like `results`)\n  let nodeField = get(node, 'field')\n  let typeOptions = _.get([nodeField, 'typeOptions'], fields) || []\n  if (node.type && !_.includes(node.type, typeOptions))\n    typeOptions = [...typeOptions, node.type]\n  let nodeLabel = _.get([nodeField, 'label'], fields) || nodeField\n  return (\n    <Grid columns=\"auto auto minmax(0, 1fr)\" style={{ width: '100%' }}>\n      <ModalPicker\n        label={nodeField ? nodeLabel : 'Pick a Field'}\n        options={fieldsToOptions(fields)}\n        onChange={field =>\n          tree.replace(node.path, transformNodeFromField({ field, fields }))\n        }\n      />\n      {nodeField && (\n        <div style={{ margin: '0 5px' }}>\n          <Select\n            onChange={({ target: { value: type } }) => {\n              tree.replace(node.path, newNodeFromType(type, fields, node))\n            }}\n            placeholder=\"Select Type\"\n            value={F.when(_.isNil, undefined)(node.type)} // fix null value issue...\n            options={getTypeLabelOptions(tree, typeOptions)}\n          />\n        </div>\n      )}\n      {node.type && (\n        <div\n          style={{\n            display: 'inline-block',\n            verticalAlign: 'top',\n            width: '100%',\n            marginRight: '5px',\n          }}\n        >\n          <Dynamic\n            {...{\n              component: UnmappedNodeComponent,\n              tree,\n              node,\n              ...mapNodeToProps(node, fields),\n            }}\n          />\n        </div>\n      )}\n    </Grid>\n  )\n}\n\nexport default _.flow(observer, withTheme)(FilterContents)\n"],"file":"FilterContents.js"}