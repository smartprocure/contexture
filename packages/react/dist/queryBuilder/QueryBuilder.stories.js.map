{"version":3,"sources":["../../src/queryBuilder/QueryBuilder.stories.js"],"names":["Client","debug","types","exampleTypes","service","Node","type","key","module","addDecorator","add","join","children","TypeMap","field","test","label","typeOptions","test2","context","options","name","count","value"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { storiesOf } from '@storybook/react'\nimport { exampleTypes, mockService } from 'contexture-client'\nimport ContextureMobx from '../utils/contexture-mobx'\nimport { TypeMap } from '../exampleTypes'\nimport { componentForType } from '../utils/schema'\nimport ThemePicker from '../stories/themePicker'\nimport QueryBuilder from '.'\n\nlet Client = ContextureMobx({\n  debug: true,\n  types: exampleTypes,\n  service: mockService(),\n})\n\nlet Node = (type, key) => ({ key, type })\n\nstoriesOf('Search Components|QueryBuilder', module)\n  .addDecorator(ThemePicker('greyVest'))\n  .add('One Filter', () => (\n    <QueryBuilder\n      tree={Client({\n        key: 'root',\n        join: 'and',\n        children: [{ key: 'filter 1', type: 'query' }],\n      })}\n      path={['root']}\n      mapNodeToProps={componentForType(TypeMap)}\n    />\n  ))\n  .add('One Filter with fields', () => (\n    <QueryBuilder\n      path={['root']}\n      tree={Client({\n        key: 'root',\n        join: 'and',\n        children: [{ key: 'filter 1', field: 'test', type: 'query' }],\n      })}\n      fields={{\n        test: {\n          field: 'test',\n          label: 'Test',\n          typeOptions: ['facet', 'query'],\n        },\n        test2: {\n          field: 'test2',\n          label: 'Test2',\n          typeOptions: ['facet', 'query'],\n        },\n      }}\n      mapNodeToProps={componentForType(TypeMap)}\n    />\n  ))\n  .add('One Filter with facet options', () => (\n    <QueryBuilder\n      path={['root']}\n      tree={Client({\n        key: 'root',\n        join: 'and',\n        children: [\n          {\n            key: 'filter 1',\n            type: 'facet',\n            context: {\n              options: [\n                {\n                  name: 'Option 1',\n                  count: 2,\n                },\n                {\n                  name: 'Option 2',\n                  count: 1,\n                },\n              ],\n            },\n          },\n        ],\n      })}\n      fields={['field1', 'field2', { label: 'Field 3', value: 'field3' }]}\n      mapNodeToProps={componentForType(TypeMap)}\n    />\n  ))\n  .add('One Filter on a misplaced root', () => (\n    <QueryBuilder\n      tree={Client({\n        key: 'root',\n        join: 'and',\n        children: [\n          {\n            key: 'search',\n            join: 'and',\n            children: [{ key: 'filter 1', type: 'query' }],\n          },\n        ],\n      })}\n      path={['root', 'search']}\n      mapNodeToProps={componentForType(TypeMap)}\n    />\n  ))\n  .add('Multiple Filters', () => (\n    <QueryBuilder\n      path={['root']}\n      tree={Client({\n        key: 'root',\n        join: 'and',\n        children: [\n          Node('query', 'filter 1'),\n          {\n            key: 'group1',\n            join: 'or',\n            children: [\n              Node('query', 'filter 2a'),\n              Node('query', 'filter 2b'),\n              {\n                key: 'group2',\n                join: 'and',\n                children: [\n                  Node('facet', 'filter 4a'),\n                  Node('query', 'filter 4b'),\n                ],\n              },\n            ],\n          },\n          Node('query', 'filter 3'),\n          {\n            key: 'group2',\n            join: 'not',\n            children: [Node('number', 'filter 5a'), Node('query', 'filter 5b')],\n          },\n          {\n            key: 'group24',\n            join: 'or',\n            children: [\n              {\n                key: 'group2',\n                join: 'and',\n                children: [\n                  Node('query', 'filter 4a'),\n                  Node('text', 'txt filter 4b'),\n                ],\n              },\n              Node('query', 'asdf'),\n            ],\n          },\n        ],\n      })}\n      mapNodeToProps={componentForType(TypeMap)}\n    />\n  ))\n"],"file":"QueryBuilder.stories.js"}