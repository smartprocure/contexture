{"version":3,"sources":["../../src/queryBuilder/OperatorMenu.js"],"names":["btn","styles","joinColor","bgJoin","OperatorMenu","node","hover","tree","parent","_","map","join","F","domLens","x","set","mutate","path","toUpperCase","color","marginTop","wrap","off","remove"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;IACMA,G,GAA2BC,kB,CAA3BD,G;IAAKE,S,GAAsBD,kB,CAAtBC,S;IAAWC,M,GAAWF,kB,CAAXE,M;;AAEtB,IAAIC,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAASC,KAAT,QAASA,KAAT;AAAA,MAAgBC,IAAhB,QAAgBA,IAAhB;AAAA,MAAsBC,MAAtB,QAAsBA,MAAtB;AAAA,sBACjB,6CACGC,eAAEC,GAAF,CACC,UAAAC,IAAI;AAAA,WACFN,IAAI,CAACM,IAAL,KAAcA,IAAd,iBACE;AACE,MAAA,GAAG,EAAEA;AADP,OAEMC,kBAAEC,OAAF,CAAUP,KAAV,CAAgB,UAAAQ,CAAC;AAAA,aAAIF,kBAAEG,GAAF,CAAMD,CAAC,IAAIH,IAAX,EAAiBL,KAAK,CAACK,IAAvB,CAAJ;AAAA,KAAjB,CAFN;AAGE,MAAA,KAAK,kCAAOX,GAAP,GAAeG,MAAM,CAACQ,IAAD,CAArB,CAHP;AAIE,MAAA,OAAO,EAAE;AAAA,eAAMJ,IAAI,CAACS,MAAL,CAAYX,IAAI,CAACY,IAAjB,EAAuB;AAAEN,UAAAA,IAAI,EAAJA;AAAF,SAAvB,CAAN;AAAA;AAJX,eAMMA,IAAI,CAACO,WAAL,EANN,CAFA;AAAA,GADL,EAYC,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,CAZD,CADH,eAeE,0DACE;AACE,IAAA,KAAK,kCACAlB,GADA;AAEHmB,MAAAA,KAAK,EAAEjB,SAAS,CAAC,0BAAaM,MAAb,CAAD,CAFb;AAGHY,MAAAA,SAAS,EAAE;AAHR;AADP,KAMMR,kBAAEC,OAAF,CAAUP,KAAV,CAAgBA,KAAK,CAACe,IAAtB,CANN;AAOE,IAAA,OAAO,EAAE,mBAAM;AACb,0BAAOd,IAAP,EAAaC,MAAb,EAAqBH,IAArB;;AACAO,wBAAEU,GAAF,CAAMhB,KAAK,CAACe,IAAZ;AACD;AAVH,kBAYW,0BAAab,MAAb,EAAqBU,WAArB,EAZX,CADF,CAfF,eA+BE,0DACE,oDACMN,kBAAEC,OAAF,CAAUP,KAAV,CAAgBA,KAAK,CAACiB,MAAtB,CADN;AAEE,IAAA,KAAK,kCAAOvB,GAAP;AAAYoB,MAAAA,SAAS,EAAE;AAAvB,MAFP;AAGE,IAAA,OAAO,EAAE;AAAA,aAAMb,IAAI,CAACgB,MAAL,CAAYlB,IAAI,CAACY,IAAjB,CAAN;AAAA;AAHX,eADF,CA/BF,CADiB;AAAA,CAAnB;;eA4Ce,yBAASb,YAAT,C","sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\nimport _ from 'lodash/fp'\nimport F from 'futil'\nimport styles from '../styles'\nimport { oppositeJoin, indent } from '../utils/search'\nlet { btn, joinColor, bgJoin } = styles\n\nlet OperatorMenu = ({ node, hover, tree, parent }) => (\n  <div>\n    {_.map(\n      join =>\n        node.join !== join && (\n          <div\n            key={join}\n            {...F.domLens.hover(x => F.set(x && join, hover.join))}\n            style={{ ...btn, ...bgJoin(join) }}\n            onClick={() => tree.mutate(node.path, { join })}\n          >\n            To {join.toUpperCase()}\n          </div>\n        ),\n      ['and', 'or', 'not']\n    )}\n    <div>\n      <div\n        style={{\n          ...btn,\n          color: joinColor(oppositeJoin(parent)),\n          marginTop: 5,\n        }}\n        {...F.domLens.hover(hover.wrap)}\n        onClick={() => {\n          indent(tree, parent, node)\n          F.off(hover.wrap)()\n        }}\n      >\n        Wrap in {oppositeJoin(parent).toUpperCase()}\n      </div>\n    </div>\n    <div>\n      <div\n        {...F.domLens.hover(hover.remove)}\n        style={{ ...btn, marginTop: 5 }}\n        onClick={() => tree.remove(node.path)}\n      >\n        Remove\n      </div>\n    </div>\n  </div>\n)\n\nexport default observer(OperatorMenu)\n"],"file":"OperatorMenu.js"}