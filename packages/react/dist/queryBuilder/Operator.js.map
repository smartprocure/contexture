{"version":3,"sources":["../../src/queryBuilder/Operator.js"],"names":["BlankOperator","open","node","child","F","flip","styles","blankOperator","borderBottomColor","joinColor","join","children","operatorLine","blankOperatorLineExtended","bgJoin","OperatorLine","style","operatorLineExtended","displayName","JoinOperator","hover","operator","view","fontStyle","opacity","Operator","parent","tree","index","React","useState","operatorPopover","bdJoin","wrap","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react'\nimport * as F from 'futil'\nimport { observer } from 'mobx-react'\n\nimport styles from '../styles'\nimport { Popover } from '../greyVest'\nimport OperatorMenu from './OperatorMenu'\nimport { OperatorMoveTarget } from './DragDrop/MoveTargets'\n\nlet BlankOperator = ({ open, node, child }) => (\n  <div>\n    <div\n      onClick={F.flip(open)}\n      style={{\n        ...styles.blankOperator,\n        borderBottomColor: styles.joinColor(node.join),\n      }}\n    />\n    {child.children && child.join !== 'not' && (\n      <div\n        style={{\n          ...styles.operatorLine,\n          ...styles.blankOperatorLineExtended,\n          ...styles.bgJoin(node),\n        }}\n      />\n    )}\n  </div>\n)\n\nlet OperatorLine = observer(({ node, child, style }) => (\n  <div\n    style={{\n      ...styles.operatorLine,\n      ...(child.children &&\n        child.join !== 'not' &&\n        styles.operatorLineExtended),\n      ...styles.bgJoin(node),\n      ...style,\n    }}\n  />\n))\nOperatorLine.displayName = 'OperatorLine'\n\nlet JoinOperator = ({ open, hover, node, child }) => (\n  <div>\n    <div\n      onClick={F.flip(open)}\n      style={{\n        ...styles.operator,\n        ...styles.bgJoin(F.view(hover.join) || node),\n      }}\n    >\n      <span\n        style={{\n          ...(F.view(hover.join) && {\n            fontStyle: 'italic',\n            opacity: 0.5,\n          }),\n        }}\n      >\n        {F.view(hover.join) || node.join}\n      </span>\n    </div>\n    <OperatorLine {...{ node, child }} />\n  </div>\n)\n\nlet Operator = ({ hover, node, child, parent, tree, index }) => {\n  let open = React.useState(false)\n  return (\n    <div>\n      {!(index !== 0 || node.join === 'not') ? (\n        <BlankOperator {...{ open, node, child }} />\n      ) : (\n        <JoinOperator {...{ open, node, child, hover }} />\n      )}\n      <OperatorMoveTarget {...{ node, tree, index }} />\n      <Popover\n        open={open}\n        style={{\n          ...styles.operatorPopover,\n          ...styles.bdJoin(node),\n          ...(F.view(hover.wrap) && { marginLeft: 0 }),\n        }}\n      >\n        <OperatorMenu {...{ node, hover, tree, parent }} />\n      </Popover>\n    </div>\n  )\n}\n\nexport default observer(Operator)\n"],"file":"Operator.js"}