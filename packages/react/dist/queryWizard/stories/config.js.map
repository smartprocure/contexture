{"version":3,"sources":["../../../src/queryWizard/stories/config.js"],"names":["typeDescriptions","tagsQuery","description","query","facet","types","_","merge","exampleTypes","fields","foo","label","bar","Client","debug","service","tree","key","join","children","type","field","nodeOverrides","longName"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAIA,gBAAgB,GAAG;AACrBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,WAAW,EAAE;AADJ,GADU;AAIrBC,EAAAA,KAAK,EAAE;AACLD,IAAAA,WAAW,EAAE;AADR,GAJc;AAOrBE,EAAAA,KAAK,EAAE;AACLF,IAAAA,WAAW,EACT;AAFG;AAPc,CAAvB;;AAaO,IAAIG,KAAK,GAAGC,eAAEC,KAAF,CAAQC,8BAAR,EAAsBR,gBAAtB,CAAZ;;;AAEA,IAAIS,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgBT,IAAAA,WAAW,EAAE;AAA7B,GADa;AAElBU,EAAAA,GAAG,EAAE;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBT,IAAAA,WAAW,EAAE;AAA7B;AAFa,CAAb;;AAKP,IAAIW,MAAM,GAAG,gCAAe;AAC1BC,EAAAA,KAAK,EAAE,IADmB;AAE1BT,EAAAA,KAAK,EAALA,KAF0B;AAG1BU,EAAAA,OAAO,EAAE;AAHiB,CAAf,CAAb;AAMO,IAAIC,IAAI,GAAGH,MAAM,CAAC;AACvBI,EAAAA,GAAG,EAAE,MADkB;AAEvBC,EAAAA,IAAI,EAAE,KAFiB;AAGvBC,EAAAA,QAAQ,EAAE,CACR;AACEF,IAAAA,GAAG,EAAE,QADP;AAEEG,IAAAA,IAAI,EAAE,OAFR;AAGEF,IAAAA,IAAI,EAAE,KAHR;AAIEC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,IAAI,EAAE,WADR;AAEEH,MAAAA,GAAG,EAAE;AAFP,KADQ,EAKR;AACEA,MAAAA,GAAG,EAAE,MADP;AAEEG,MAAAA,IAAI,EAAE,OAFR;AAGEF,MAAAA,IAAI,EAAE,KAHR;AAIEC,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,IAAI,EAAE,OADR;AAEEH,QAAAA,GAAG,EAAE;AAFP,OADQ,EAKR;AACEG,QAAAA,IAAI,EAAE,OADR;AAEEH,QAAAA,GAAG,EAAE,KAFP;AAGEC,QAAAA,IAAI,EAAE,IAHR;AAIEC,QAAAA,QAAQ,EAAE,CACR;AACEF,UAAAA,GAAG,EAAE,KADP;AAEEI,UAAAA,KAAK,EAAE,KAFT;AAGED,UAAAA,IAAI,EAAE;AAHR,SADQ,EAMR;AACEH,UAAAA,GAAG,EAAE,KADP;AAEEI,UAAAA,KAAK,EAAE,KAFT;AAGED,UAAAA,IAAI,EAAE;AAHR,SANQ;AAJZ,OALQ;AAJZ,KALQ,EAiCR;AACEA,MAAAA,IAAI,EAAE,OADR;AAEEH,MAAAA,GAAG,EAAE;AAFP,KAjCQ;AAJZ,GADQ,EA4CR;AACEA,IAAAA,GAAG,EAAE,QADP;AAEEG,IAAAA,IAAI,EAAE,OAFR;AAGEF,IAAAA,IAAI,EAAE,KAHR;AAIEC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,IAAI,EAAE,WADR;AAEEH,MAAAA,GAAG,EAAE,eAFP;AAGEI,MAAAA,KAAK,EAAE;AAHT,KADQ,EAMR;AACED,MAAAA,IAAI,EAAE,OADR;AAEEH,MAAAA,GAAG,EAAE,gBAFP;AAGEI,MAAAA,KAAK,EAAE;AAHT,KANQ;AAJZ,GA5CQ;AAHa,CAAD,CAAjB;;AAmEA,IAAIC,aAAa,GAAG;AACzBC,EAAAA,QAAQ,EAAE;AACRZ,IAAAA,KAAK,EAAE;AADC,GADe;AAIzB,oBAAkB;AAChBA,IAAAA,KAAK,EAAE,kCADS;AAEhBT,IAAAA,WAAW,EAAE;AAFG;AAJO,CAApB","sourcesContent":["import _ from 'lodash/fp'\nimport { exampleTypes, mockService } from 'contexture-client'\nimport ContextureMobx from '../../utils/contexture-mobx'\n\nlet typeDescriptions = {\n  tagsQuery: {\n    description: 'Enter some tags.',\n  },\n  query: {\n    description: 'Enter a search term in the field.',\n  },\n  facet: {\n    description:\n      'Use the checkboxes to select all the results you wish to include. You can find and add multiple results by repeating this process.',\n  },\n}\n\nexport let types = _.merge(exampleTypes, typeDescriptions)\n\nexport let fields = {\n  foo: { label: 'Foo', description: 'Enter a foo.' },\n  bar: { label: 'Bar', description: \"Type in the bar's name.\" },\n}\n\nlet Client = ContextureMobx({\n  debug: true,\n  types,\n  service: mockService(),\n})\n\nexport let tree = Client({\n  key: 'root',\n  join: 'and',\n  children: [\n    {\n      key: 'step 1',\n      type: 'group',\n      join: 'and',\n      children: [\n        {\n          type: 'tagsQuery',\n          key: 'friendly node',\n        },\n        {\n          key: 'foop',\n          type: 'group',\n          join: 'and',\n          children: [\n            {\n              type: 'query',\n              key: 'longName',\n            },\n            {\n              type: 'group',\n              key: 'foo',\n              join: 'or',\n              children: [\n                {\n                  key: 'foo',\n                  field: 'foo',\n                  type: 'query',\n                },\n                {\n                  key: 'bar',\n                  field: 'bar',\n                  type: 'tagsQuery',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          type: 'facet',\n          key: 'friendly facet',\n        },\n      ],\n    },\n    {\n      key: 'step 2',\n      type: 'group',\n      join: 'and',\n      children: [\n        {\n          type: 'tagsQuery',\n          key: 'friendly node',\n          field: 'foo',\n        },\n        {\n          type: 'facet',\n          key: 'friendly facet',\n          field: 'bar',\n        },\n      ],\n    },\n  ],\n})\n\nexport let nodeOverrides = {\n  longName: {\n    label: 'This is a really long name',\n  },\n  'friendly facet': {\n    label: 'This is another really long name',\n    description: 'FRIENDLY FACET OVERRIDE DESCRIPTION!',\n  },\n}\n"],"file":"config.js"}