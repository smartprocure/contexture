{"version":3,"sources":["../src/MemoryTable.js"],"names":["memoryService","records","schema","debug","schemas","memory","providers","types","MemoryTable","data","fields","include","props","service","React","useState","key","children","type","tree","refresh","TypeMap"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAIA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD;AAAA,iFAA8B,EAA9B;AAAA,MAAYC,MAAZ,QAAYA,MAAZ;AAAA,MAAoBC,KAApB,QAAoBA,KAApB;;AAAA,SACzB,4BAAW;AACTA,IAAAA,KAAK,EAALA,KADS;AAET;AACA;AACAC,IAAAA,OAAO,sBAAKF,MAAL,EAAc;AAAEG,MAAAA,MAAM,EAAE;AAAEJ,QAAAA,OAAO,EAAPA;AAAF;AAAV,KAAd,CAJE;AAKTK,IAAAA,SAAS,EAAE;AAAED,MAAAA,MAAM,kCAAOA,0BAAP;AAAeE,QAAAA,KAAK,EAAE;AAAtB;AAAR;AALF,GAAX,CADyB;AAAA,CAApB;;;;AASP,IAAIC,WAAW,GAAG,SAAdA,WAAc,QAAgD;AAAA,MAA7CC,IAA6C,SAA7CA,IAA6C;AAAA,MAAvCC,MAAuC,SAAvCA,MAAuC;AAAA,MAA/BP,KAA+B,SAA/BA,KAA+B;AAAA,MAAxBQ,OAAwB,SAAxBA,OAAwB;AAAA,MAAZC,KAAY;;AAChE,MAAIC,OAAO,GAAGb,aAAa,CAACS,IAAD,EAAO;AAAEP,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,KAAK,EAALA;AAAlB,GAAP,CAA3B;;AADgE,wBAEnDW,kBAAMC,QAAN,CACX,gCAAe;AAAEF,IAAAA,OAAO,EAAPA;AAAF,GAAf,EAA4B;AAC1BG,IAAAA,GAAG,EAAE,MADqB;AAE1Bd,IAAAA,MAAM,EAAE,MAFkB;AAG1Be,IAAAA,QAAQ,EAAE,CACR;AAAED,MAAAA,GAAG,EAAE,SAAP;AAAkBE,MAAAA,IAAI,EAAE,SAAxB;AAAmCP,MAAAA,OAAO,EAAPA;AAAnC,KADQ,EAER;AAAEK,MAAAA,GAAG,EAAE,UAAP;AAAmBE,MAAAA,IAAI,EAAE,OAAzB;AAAkCD,MAAAA,QAAQ,EAAE;AAA5C,KAFQ;AAHgB,GAA5B,CADW,CAFmD;AAAA;AAAA,MAE3DE,IAF2D;;AAYhEA,EAAAA,IAAI,CAACC,OAAL,CAAa,CAAC,MAAD,CAAb;AACA,sBACE,gCAAC,0BAAD;AACE,IAAA,IAAI,EAAE,CAAC,MAAD,EAAS,SAAT,CADR;AAEE,IAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,UAAT,CAFZ;AAGE,IAAA,cAAc,EAAE,8BAAiBC,sBAAjB;AAHlB;AAIQX,IAAAA,MAAM,EAANA,MAJR;AAIgBS,IAAAA,IAAI,EAAJA;AAJhB,KAIyBP,KAJzB,GADF;AAQD,CArBD;;eAuBe,yBAASJ,WAAT,C","sourcesContent":["import Contexture from 'contexture'\nimport memory from 'contexture/src/provider-memory'\nimport types from 'contexture/src/provider-memory/exampleTypes'\nimport { observer } from 'mobx-react'\nimport React from 'react'\nimport ContextureMobx from './utils/contexture-mobx'\nimport { componentForType } from './utils/schema'\nimport { ResultTable, TypeMap } from './exampleTypes'\n\nexport let memoryService = (records, { schema, debug } = {}) =>\n  Contexture({\n    debug,\n    // Hack to effectively set a default schema: if our tree root doesn't have\n    // a `schema` property, it will get the schema at key `undefined`.\n    schemas: { [schema]: { memory: { records } } },\n    providers: { memory: { ...memory, types: types() } },\n  })\n\nlet MemoryTable = ({ data, fields, debug, include, ...props }) => {\n  let service = memoryService(data, { schema: 'data', debug })\n  let [tree] = React.useState(\n    ContextureMobx({ service })({\n      key: 'root',\n      schema: 'data',\n      children: [\n        { key: 'results', type: 'results', include },\n        { key: 'criteria', type: 'group', children: [] },\n      ],\n    })\n  )\n  tree.refresh(['root'])\n  return (\n    <ResultTable\n      path={['root', 'results']}\n      criteria={['root', 'criteria']}\n      mapNodeToProps={componentForType(TypeMap)}\n      {...{ fields, tree, ...props }}\n    />\n  )\n}\n\nexport default observer(MemoryTable)\n"],"file":"MemoryTable.js"}