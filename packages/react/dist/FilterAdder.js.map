{"version":3,"sources":["../src/FilterAdder.js"],"names":["fieldsToOptions","_","map","x","value","field","getGroupFields","node","getOr","FilterAdder","tree","path","fields","uniqueFields","Picker","ModalPicker","Icon","theme","options","reject","includes","Label","paddingLeft","add"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEO,IAAIA,eAAe,GAAGC,eAAEC,GAAF,CAAM,UAAAC,CAAC;AAAA;AAAOC,IAAAA,KAAK,EAAED,CAAC,CAACE;AAAhB,KAA0BF,CAA1B;AAAA,CAAP,CAAtB;;;;AAEP,IAAIG,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,IAAI;AAAA,SAAIN,eAAEC,GAAF,CAAM,OAAN,EAAeD,eAAEO,KAAF,CAAQ,EAAR,EAAY,UAAZ,EAAwBD,IAAxB,CAAf,CAAJ;AAAA,CAAzB;;AAEA,IAAIE,WAAW,GAAG,SAAdA,WAAc,OAQZ;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJH,IAMI,QANJA,IAMI;AAAA,MALJI,IAKI,QALJA,IAKI;AAAA,MAJJC,MAII,QAJJA,MAII;AAAA,MAHJC,YAGI,QAHJA,YAGI;AAAA,yBAFJC,MAEI;AAAA,MAFJA,MAEI,4BAFKC,sBAEL;AAAA,MADKC,IACL,QADJC,KACI,CADKD,IACL;AACJ,MAAIE,OAAO,GAAGlB,eAAe,CAACY,MAAD,CAA7B;;AACA,MAAIC,YAAJ,EAAkB;AAChBK,IAAAA,OAAO,GAAGjB,eAAEkB,MAAF,CAAS,UAAAhB,CAAC;AAAA,aAAIF,eAAEmB,QAAF,CAAWjB,CAAC,CAACE,KAAb,EAAoBC,cAAc,CAACC,IAAD,CAAlC,CAAJ;AAAA,KAAV,EAAyDW,OAAzD,CAAV;AACD;;AACD,MAAIG,KAAK,gBACP,gCAAC,cAAD;AAAM,IAAA,cAAc,EAAC,QAArB;AAA8B,IAAA,UAAU,EAAC;AAAzC,uCAEE,gCAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAb;AAAiC,IAAA,IAAI,EAAC;AAAtC,IAFF,CADF;;AAMA,sBACE,gCAAC,MAAD;AACE,IAAA,OAAO,EAAEJ,OADX;AAEE,IAAA,QAAQ,EAAE,kBAAAb,KAAK;AAAA,aAAIK,IAAI,CAACa,GAAL,CAASZ,IAAT,EAAe,8BAAiB;AAAEN,QAAAA,KAAK,EAALA,KAAF;AAASO,QAAAA,MAAM,EAANA;AAAT,OAAjB,CAAf,CAAJ;AAAA,KAFjB;AAGE,IAAA,KAAK,EAAES,KAHT;AAIE,IAAA,WAAW,EAAE;AAJf,IADF;AAQD,CA3BD;;eA6Be,oCAA0BZ,WAA1B,C","sourcesContent":["import _ from 'lodash/fp'\nimport React from 'react'\nimport { contexturifyWithoutLoader } from './utils/hoc'\nimport { newNodeFromField } from './utils/search'\nimport { ModalPicker } from './purgatory'\nimport { Flex } from './greyVest'\n\nexport let fieldsToOptions = _.map(x => ({ value: x.field, ...x }))\n\nlet getGroupFields = node => _.map('field', _.getOr([], 'children', node))\n\nlet FilterAdder = ({\n  tree,\n  node,\n  path,\n  fields,\n  uniqueFields,\n  Picker = ModalPicker,\n  theme: { Icon },\n}) => {\n  let options = fieldsToOptions(fields)\n  if (uniqueFields) {\n    options = _.reject(x => _.includes(x.field, getGroupFields(node)), options)\n  }\n  let Label = (\n    <Flex justifyContent=\"center\" alignItems=\"center\">\n      Add Custom Filter\n      <Icon style={{ paddingLeft: 5 }} icon=\"FilterAdd\" />\n    </Flex>\n  )\n  return (\n    <Picker\n      options={options}\n      onChange={field => tree.add(path, newNodeFromField({ field, fields }))}\n      label={Label}\n      blockButton={true}\n    />\n  )\n}\n\nexport default contexturifyWithoutLoader(FilterAdder)\n"],"file":"FilterAdder.js"}