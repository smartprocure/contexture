{"version":3,"sources":["../src/FilterButtonList.js"],"names":["FilterButtonItem","_","flow","withLoader","withTheme","node","tree","fields","mapNodeToProps","theme","Button","UnmappedNodeComponent","Modal","mappedProps","modal","React","useState","title","get","field","key","description","hasValue","F","on","component","path","toArray","clear","off","GroupBox","nodeJoinColor","children","nested","className","borderColor","FilterButtonList","noop","styles","joinColor","map","child","Component"],"mappings":"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","sourcesContent":["import F from 'futil'\nimport _ from 'lodash/fp'\nimport React from 'react'\nimport { setDisplayName } from 'recompose'\nimport { Dynamic, Flex } from './greyVest'\nimport { CheckButton } from './purgatory'\nimport { withNode, withLoader } from './utils/hoc'\nimport { withTheme } from './utils/theme'\nimport styles from './styles'\n\nlet FilterButtonItem = _.flow(\n  setDisplayName('FilterButtonItem'),\n  withLoader,\n  withTheme\n)(\n  ({\n    node,\n    tree,\n    fields,\n    mapNodeToProps,\n    theme: { Button, UnmappedNodeComponent, Modal },\n  }) => {\n    let mappedProps = mapNodeToProps(node, fields)\n    let modal = React.useState(false)\n    let title = // we really need a title, so here's every possible fallback\n      _.get('label', mappedProps) ||\n      _.get([node.field, 'label'], fields) ||\n      node.field ||\n      node.key\n    let description = _.get('description', mappedProps)\n    return (\n      <>\n        <CheckButton checked={node.hasValue} onClick={F.on(modal)}>\n          {title}\n        </CheckButton>\n        <Modal open={modal}>\n          <div className=\"filter-button-modal\">\n            <h1>{title}</h1>\n            {description && (\n              <div className=\"filter-description\">{description}</div>\n            )}\n            <div className=\"filter-component\">\n              <Dynamic\n                {...{\n                  component: UnmappedNodeComponent,\n                  tree,\n                  node,\n                  path: _.toArray(node.path),\n                  ...mappedProps,\n                }}\n              />\n            </div>\n            <Button onClick={() => tree.clear(node.path)}>Clear</Button>\n            <Button primary onClick={F.off(modal)}>\n              Done\n            </Button>\n          </div>\n        </Modal>\n      </>\n    )\n  }\n)\n\nlet GroupBox = ({ nodeJoinColor, children, nested, className }) => (\n  <Flex\n    wrap\n    className={`${className} ${nested ? 'nested' : ''}`}\n    alignItems=\"center\"\n    style={{ borderColor: nodeJoinColor }}\n  >\n    {children}\n  </Flex>\n)\n\nlet FilterButtonList = ({\n  node,\n  tree,\n  fields = {},\n  mapNodeToProps = _.noop,\n  className = 'filter-button-list',\n  nested = false,\n}) => (\n  <GroupBox\n    {...{ nested, className }}\n    nodeJoinColor={node && styles.joinColor(node)}\n  >\n    {_.map(child => {\n      let Component = child.children ? FilterButtonList : FilterButtonItem\n      return (\n        <Component\n          key={child.path}\n          nested\n          {...{\n            tree,\n            node: child,\n            fields,\n            mapNodeToProps,\n            className,\n          }}\n        />\n      )\n    }, _.get('children', node))}\n  </GroupBox>\n)\n\nexport default withNode(FilterButtonList)\n"],"file":"FilterButtonList.js"}