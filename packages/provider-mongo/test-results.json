{
  "stats": {
    "suites": 29,
    "tests": 59,
    "passes": 59,
    "pending": 0,
    "failures": 0,
    "start": "2020-04-24T17:27:19.450Z",
    "end": "2020-04-24T17:27:19.727Z",
    "duration": 277
  },
  "tests": [
    {
      "title": "should check for values",
      "fullTitle": "date date.hasValue should check for values",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "basic",
      "fullTitle": "date date.filter basic",
      "duration": 3,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "basic datemath",
      "fullTitle": "date date.filter basic datemath",
      "duration": 2,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "ms timestamp",
      "fullTitle": "date date.filter ms timestamp",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "unix timestamp",
      "fullTitle": "date date.filter unix timestamp",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "result should output the expected query and results",
      "fullTitle": "dateHistogram dateHistogram.result result should output the expected query and results",
      "duration": 12,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "If a value is provided, use $and",
      "fullTitle": "exists exists.filter If a value is provided, use $and",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "If no value is provided, use $or",
      "fullTitle": "exists exists.filter If no value is provided, use $or",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should allow nodes with values",
      "fullTitle": "facet facet.hasValue Should allow nodes with values",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should not allow nodes with values",
      "fullTitle": "facet facet.hasValue Should not allow nodes with values",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should call the search function and wait for it",
      "fullTitle": "facet facet.result should call the search function and wait for it",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should default the limit query to 10 if size is not provided",
      "fullTitle": "facet facet.result should default the limit query to 10 if size is not provided",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should allow unlimited queries",
      "fullTitle": "facet facet.result should allow unlimited queries",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support optionsFilter",
      "fullTitle": "facet facet.result should support optionsFilter",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support optionsFilter with multiple words and spaces",
      "fullTitle": "facet facet.result should support optionsFilter with multiple words and spaces",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support isMongoId",
      "fullTitle": "facet facet.result should support isMongoId",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support string label lookups",
      "fullTitle": "facet facet.result should support string label lookups",
      "duration": 5,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support array label lookups",
      "fullTitle": "facet facet.result should support array label lookups",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should ignore label lookup when not present",
      "fullTitle": "facet facet.result should ignore label lookup when not present",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support optionsFilter with a lookup that returns a single field",
      "fullTitle": "facet facet.result should support optionsFilter with a lookup that returns a single field",
      "duration": 2,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support a lookup with an optionsFilter with multiple keywords that span multiple fields",
      "fullTitle": "facet facet.result should support a lookup with an optionsFilter with multiple keywords that span multiple fields",
      "duration": 3,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should allow for an optional node.unwind to distinguish a nested array field being searched",
      "fullTitle": "facet facet.result should allow for an optional node.unwind to distinguish a nested array field being searched",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should check for value",
      "fullTitle": "mongoId mongoId.hasValue should check for value",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should create filter for _id",
      "fullTitle": "mongoId mongoId.filter should create filter for _id",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle $in with a data.values array",
      "fullTitle": "mongoId mongoId.filter should handle $in with a data.values array",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle $in with a data.values array",
      "fullTitle": "mongoId mongoId.filter should handle $in with a data.values array",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Allows optionally either min or max",
      "fullTitle": "number number.hasValue Allows optionally either min or max",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Allows 0 on min and max",
      "fullTitle": "number number.hasValue Allows 0 on min and max",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should reject empty string, null, undefined, Infinity, and NaN",
      "fullTitle": "number number.hasValue Should reject empty string, null, undefined, Infinity, and NaN",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should handle numbers as strings",
      "fullTitle": "number number.hasValue Should handle numbers as strings",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should convert both min and max to valid numbers",
      "fullTitle": "number number.filter Should convert both min and max to valid numbers",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should remove unused properties",
      "fullTitle": "number number.filter Should remove unused properties",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should remove fields if not valid",
      "fullTitle": "number number.filter Should remove fields if not valid",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should translate populate object into an array of $lookup objects",
      "fullTitle": "results convertPopulate should translate populate object into an array of $lookup objects",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add \"$unwind\" stage if \"unwind\" is present in the populate config",
      "fullTitle": "results convertPopulate should add \"$unwind\" stage if \"unwind\" is present in the populate config",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return 0 if page is 1",
      "fullTitle": "results getStartRecord should return 0 if page is 1",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return 0 if page is < 1",
      "fullTitle": "results getStartRecord should return 0 if page is < 1",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return 10 if page is 2",
      "fullTitle": "results getStartRecord should return 10 if page is 2",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should put $sort, $skip, $limit first in pipeline",
      "fullTitle": "results getResultsQuery should put $sort, $skip, $limit first in pipeline",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should put $sort, $skip, $limit first in pipeline where sort field is not part of a join",
      "fullTitle": "results getResultsQuery should put $sort, $skip, $limit first in pipeline where sort field is not part of a join",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should put $sort, $skip, $limit first after $lookup",
      "fullTitle": "results getResultsQuery should put $sort, $skip, $limit first after $lookup",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should sort descending and skip $lookup and $project",
      "fullTitle": "results getResultsQuery should sort descending and skip $lookup and $project",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should not have $limit stage if pageSize is 0",
      "fullTitle": "results getResultsQuery should not have $limit stage if pageSize is 0",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should not have $sort stage if sortField is missing",
      "fullTitle": "results getResultsQuery should not have $sort stage if sortField is missing",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should fetch an extra item if skipCount is true",
      "fullTitle": "results getResultsQuery should fetch an extra item if skipCount is true",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should remove redundant child paths",
      "fullTitle": "results projectFromInclude should remove redundant child paths",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should only set hasMore if count is skipped",
      "fullTitle": "results getResponse should only set hasMore if count is skipped",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should set hasMore if there are extra results",
      "fullTitle": "results getResponse should set hasMore if there are extra results",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should not set hasMore if there are no extra results",
      "fullTitle": "results getResponse should not set hasMore if there are no extra results",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should set startRecord and endRecord based on the page",
      "fullTitle": "results getResponse should set startRecord and endRecord based on the page",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should set totalRecords based on the count (if it exists)",
      "fullTitle": "results getResponse should set totalRecords based on the count (if it exists)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "result should output the expected query",
      "fullTitle": "statistical statistical.result result should output the expected query",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "result should handle no results",
      "fullTitle": "statistical statistical.result result should handle no results",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "result should output the expected query and results",
      "fullTitle": "termsStats termsStats.result result should output the expected query and results",
      "duration": 3,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should detect a value",
      "fullTitle": "text text.hasValue should detect a value",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should detect if values is empty",
      "fullTitle": "text text.hasValue should detect if values is empty",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should detect if values only contains an empty string",
      "fullTitle": "text text.hasValue should detect if values only contains an empty string",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should detect if value is the empty string",
      "fullTitle": "text text.hasValue should detect if value is the empty string",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should check for values",
      "fullTitle": "text text.filter should check for values",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ],
  "pending": [],
  "failures": [],
  "passes": [
    {
      "title": "should check for values",
      "fullTitle": "date date.hasValue should check for values",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "basic",
      "fullTitle": "date date.filter basic",
      "duration": 3,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "basic datemath",
      "fullTitle": "date date.filter basic datemath",
      "duration": 2,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "ms timestamp",
      "fullTitle": "date date.filter ms timestamp",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "unix timestamp",
      "fullTitle": "date date.filter unix timestamp",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "result should output the expected query and results",
      "fullTitle": "dateHistogram dateHistogram.result result should output the expected query and results",
      "duration": 12,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "If a value is provided, use $and",
      "fullTitle": "exists exists.filter If a value is provided, use $and",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "If no value is provided, use $or",
      "fullTitle": "exists exists.filter If no value is provided, use $or",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should allow nodes with values",
      "fullTitle": "facet facet.hasValue Should allow nodes with values",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should not allow nodes with values",
      "fullTitle": "facet facet.hasValue Should not allow nodes with values",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should call the search function and wait for it",
      "fullTitle": "facet facet.result should call the search function and wait for it",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should default the limit query to 10 if size is not provided",
      "fullTitle": "facet facet.result should default the limit query to 10 if size is not provided",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should allow unlimited queries",
      "fullTitle": "facet facet.result should allow unlimited queries",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support optionsFilter",
      "fullTitle": "facet facet.result should support optionsFilter",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support optionsFilter with multiple words and spaces",
      "fullTitle": "facet facet.result should support optionsFilter with multiple words and spaces",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support isMongoId",
      "fullTitle": "facet facet.result should support isMongoId",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support string label lookups",
      "fullTitle": "facet facet.result should support string label lookups",
      "duration": 5,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support array label lookups",
      "fullTitle": "facet facet.result should support array label lookups",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should ignore label lookup when not present",
      "fullTitle": "facet facet.result should ignore label lookup when not present",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support optionsFilter with a lookup that returns a single field",
      "fullTitle": "facet facet.result should support optionsFilter with a lookup that returns a single field",
      "duration": 2,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should support a lookup with an optionsFilter with multiple keywords that span multiple fields",
      "fullTitle": "facet facet.result should support a lookup with an optionsFilter with multiple keywords that span multiple fields",
      "duration": 3,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should allow for an optional node.unwind to distinguish a nested array field being searched",
      "fullTitle": "facet facet.result should allow for an optional node.unwind to distinguish a nested array field being searched",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should check for value",
      "fullTitle": "mongoId mongoId.hasValue should check for value",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should create filter for _id",
      "fullTitle": "mongoId mongoId.filter should create filter for _id",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle $in with a data.values array",
      "fullTitle": "mongoId mongoId.filter should handle $in with a data.values array",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should handle $in with a data.values array",
      "fullTitle": "mongoId mongoId.filter should handle $in with a data.values array",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Allows optionally either min or max",
      "fullTitle": "number number.hasValue Allows optionally either min or max",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Allows 0 on min and max",
      "fullTitle": "number number.hasValue Allows 0 on min and max",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should reject empty string, null, undefined, Infinity, and NaN",
      "fullTitle": "number number.hasValue Should reject empty string, null, undefined, Infinity, and NaN",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should handle numbers as strings",
      "fullTitle": "number number.hasValue Should handle numbers as strings",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should convert both min and max to valid numbers",
      "fullTitle": "number number.filter Should convert both min and max to valid numbers",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should remove unused properties",
      "fullTitle": "number number.filter Should remove unused properties",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Should remove fields if not valid",
      "fullTitle": "number number.filter Should remove fields if not valid",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should translate populate object into an array of $lookup objects",
      "fullTitle": "results convertPopulate should translate populate object into an array of $lookup objects",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should add \"$unwind\" stage if \"unwind\" is present in the populate config",
      "fullTitle": "results convertPopulate should add \"$unwind\" stage if \"unwind\" is present in the populate config",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return 0 if page is 1",
      "fullTitle": "results getStartRecord should return 0 if page is 1",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return 0 if page is < 1",
      "fullTitle": "results getStartRecord should return 0 if page is < 1",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return 10 if page is 2",
      "fullTitle": "results getStartRecord should return 10 if page is 2",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should put $sort, $skip, $limit first in pipeline",
      "fullTitle": "results getResultsQuery should put $sort, $skip, $limit first in pipeline",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should put $sort, $skip, $limit first in pipeline where sort field is not part of a join",
      "fullTitle": "results getResultsQuery should put $sort, $skip, $limit first in pipeline where sort field is not part of a join",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should put $sort, $skip, $limit first after $lookup",
      "fullTitle": "results getResultsQuery should put $sort, $skip, $limit first after $lookup",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should sort descending and skip $lookup and $project",
      "fullTitle": "results getResultsQuery should sort descending and skip $lookup and $project",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should not have $limit stage if pageSize is 0",
      "fullTitle": "results getResultsQuery should not have $limit stage if pageSize is 0",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should not have $sort stage if sortField is missing",
      "fullTitle": "results getResultsQuery should not have $sort stage if sortField is missing",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should fetch an extra item if skipCount is true",
      "fullTitle": "results getResultsQuery should fetch an extra item if skipCount is true",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should remove redundant child paths",
      "fullTitle": "results projectFromInclude should remove redundant child paths",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should only set hasMore if count is skipped",
      "fullTitle": "results getResponse should only set hasMore if count is skipped",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should set hasMore if there are extra results",
      "fullTitle": "results getResponse should set hasMore if there are extra results",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should not set hasMore if there are no extra results",
      "fullTitle": "results getResponse should not set hasMore if there are no extra results",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should set startRecord and endRecord based on the page",
      "fullTitle": "results getResponse should set startRecord and endRecord based on the page",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should set totalRecords based on the count (if it exists)",
      "fullTitle": "results getResponse should set totalRecords based on the count (if it exists)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "result should output the expected query",
      "fullTitle": "statistical statistical.result result should output the expected query",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "result should handle no results",
      "fullTitle": "statistical statistical.result result should handle no results",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "result should output the expected query and results",
      "fullTitle": "termsStats termsStats.result result should output the expected query and results",
      "duration": 3,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should detect a value",
      "fullTitle": "text text.hasValue should detect a value",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should detect if values is empty",
      "fullTitle": "text text.hasValue should detect if values is empty",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should detect if values only contains an empty string",
      "fullTitle": "text text.hasValue should detect if values only contains an empty string",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should detect if value is the empty string",
      "fullTitle": "text text.hasValue should detect if value is the empty string",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should check for values",
      "fullTitle": "text text.filter should check for values",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ]
}